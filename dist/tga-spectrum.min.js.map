{"version":3,"file":"tga-spectrum.min.js","sources":["../node_modules/ml-array-normed/node_modules/is-any-array/src/index.js","../node_modules/is-any-array/src/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-sum/lib-es6/index.js","../node_modules/ml-array-normed/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-array-sequential-fill/lib-es6/index.js","../node_modules/ml-zones/src/normalize.js","../node_modules/ml-array-xy-equally-spaced/src/integral.js","../node_modules/ml-array-xy-equally-spaced/src/index.js","../node_modules/ml-zones/src/invert.js","../node_modules/ml-zones/src/zonesWithPoints.js","../node_modules/ml-array-xy-equally-spaced/src/equallySpacedSlot.js","../node_modules/ml-array-xy-equally-spaced/src/equallySpacedSmooth.js","../node_modules/ml-array-xy-filter-x/src/index.js","../node_modules/ml-array-xy-filter-x/src/getZones.js","../node_modules/ml-stat/array.js","../node_modules/ml-spectra-processing/src/x/findClosestIndex.js","../node_modules/ml-spectra-processing/src/x/multiply.js","../node_modules/ml-spectra-processing/src/x/dotProduct.js","../node_modules/ml-spectra-processing/src/x/crossCorrelation.js","../node_modules/ml-spectra-processing/src/x/index.js","../node_modules/ml-spectra-processing/src/x/add.js","../node_modules/ml-spectra-processing/src/x/autoCorrelation.js","../node_modules/ml-spectra-processing/src/x/boxPlot.js","../node_modules/ml-spectra-processing/src/x/correlation.js","../node_modules/ml-spectra-processing/src/x/divide.js","../node_modules/ml-spectra-processing/src/x/getFromToIndex.js","../node_modules/ml-spectra-processing/src/x/getTargetIndex.js","../node_modules/ml-spectra-processing/src/x/rotate.js","../node_modules/ml-spectra-processing/src/x/subtract.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/inspect.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/stat.js","../node_modules/ml-matrix/src/mathOperations.js","../node_modules/ml-matrix/src/views/base.js","../node_modules/ml-matrix/src/views/transpose.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","../node_modules/ml-matrix/src/dc/lu.js","../node_modules/ml-matrix/src/dc/util.js","../node_modules/ml-matrix/src/dc/qr.js","../node_modules/ml-matrix/src/dc/svd.js","../node_modules/ml-matrix/src/decompositions.js","../node_modules/ml-pad-array/src/index.js","../node_modules/ml-savitzky-golay/src/index.js","../src/Spectrum.js","../src/util/getNormalized.js","../src/from/parsePerkinElmer.js","../node_modules/jcampconverter/src/complexChromatogram.js","../node_modules/jcampconverter/src/convertToFloatArray.js","../node_modules/jcampconverter/src/parse/fastParseXYData.js","../node_modules/jcampconverter/src/parse/parsePeakTable.js","../node_modules/jcampconverter/src/parse/parseXYA.js","../node_modules/median-quickselect/lib/median-quickselect.min.js","../node_modules/ml-array-median/lib-es6/index.js","../node_modules/jcampconverter/src/2d/add2D.js","../node_modules/jcampconverter/src/2d/convertTo3DZ.js","../node_modules/jcampconverter/src/2d/generateContourLines.js","../node_modules/jcampconverter/src/profiling.js","../node_modules/jcampconverter/src/simpleChromatogram.js","../node_modules/jcampconverter/src/prepareSpectrum.js","../node_modules/jcampconverter/src/convert.js","../node_modules/jcampconverter/src/postProcessing.js","../node_modules/ml-xy-convert/src/from.js","../node_modules/ml-xy-convert/src/index.js","../node_modules/ml-xy-convert/src/to.js","../node_modules/convert-to-jcamp/src/index.js","../node_modules/convert-to-jcamp/src/creator.js","../src/to/toJcamp.js","../src/jsgraph/addStyle.js","../src/SpectraManager.js","../src/from/fromJcamp.js","../src/addJcamp.js","../src/from/fromPerkinElmer.js","../src/jsgraph/getJSGraph.js"],"sourcesContent":["const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction max(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the mean of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction sum(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var sumValue = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sumValue += input[i];\n  }\n\n  return sumValue;\n}\n\nexport default sum;\n","import isArray from 'is-any-array';\nimport max from 'ml-array-max';\nimport sum from 'ml-array-sum';\n\n/**\n * Computes the norm of the given values\n * @param {Array<number>} input\n * @param {object} [options={}]\n * @param {string} [options.algorithm='absolute'] absolute, sum or max\n * @param {number} [options.maxValue=1] new max value for algo max\n * @param {number} [options.sumValue=1] new max value for algo absolute and sum\n * @param {Array} [options.output=[]] specify the output array, can be the input array for in place modification\n * @return {number}\n */\n\nfunction norm(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$algorithm = options.algorithm,\n      algorithm = _options$algorithm === void 0 ? 'absolute' : _options$algorithm,\n      _options$sumValue = options.sumValue,\n      sumValue = _options$sumValue === void 0 ? 1 : _options$sumValue,\n      _options$maxValue = options.maxValue,\n      maxValue = _options$maxValue === void 0 ? 1 : _options$maxValue;\n\n  if (!isArray(input)) {\n    throw new Error('input must be an array');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  if (input.length === 0) {\n    throw new Error('input must not be empty');\n  }\n\n  switch (algorithm.toLowerCase()) {\n    case 'absolute':\n      {\n        var absoluteSumValue = absoluteSum(input) / sumValue;\n        if (absoluteSumValue === 0) return input.slice(0);\n\n        for (var i = 0; i < input.length; i++) {\n          output[i] = input[i] / absoluteSumValue;\n        }\n\n        return output;\n      }\n\n    case 'max':\n      {\n        var currentMaxValue = max(input);\n        if (currentMaxValue === 0) return input.slice(0);\n        var factor = maxValue / currentMaxValue;\n\n        for (var _i = 0; _i < input.length; _i++) {\n          output[_i] = input[_i] * factor;\n        }\n\n        return output;\n      }\n\n    case 'sum':\n      {\n        var sumFactor = sum(input) / sumValue;\n        if (sumFactor === 0) return input.slice(0);\n\n        for (var _i2 = 0; _i2 < input.length; _i2++) {\n          output[_i2] = input[_i2] / sumFactor;\n        }\n\n        return output;\n      }\n\n    default:\n      throw new Error(\"norm: unknown algorithm: \".concat(algorithm));\n  }\n}\n\nfunction absoluteSum(input) {\n  var sumValue = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sumValue += Math.abs(input[i]);\n  }\n\n  return sumValue;\n}\n\nexport default norm;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction min(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var minValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;\n","import isArray from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\n/**\n *\n * @param {Array} input\n * @param {object} [options={}]\n * @param {Array} [options.output=[]] specify the output array, can be the input array for in place modification\n */\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport default rescale;\n","import isArray from 'is-any-array';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\n/**\n * Fill an array with sequential numbers\n * @param {Array<number>} [input] - optional destination array (if not provided a new array will be created)\n * @param {object} [options={}]\n * @param {number} [options.from=0] - first value in the array\n * @param {number} [options.to=10] - last value in the array\n * @param {number} [options.size=input.length] - size of the array (if not provided calculated from step)\n * @param {number} [options.step] - if not provided calculated from size\n * @return {Array<number>}\n */\n\nfunction sequentialFill() {\n  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (_typeof(input) === 'object' && !isArray(input)) {\n    options = input;\n    input = [];\n  }\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  var _options = options,\n      _options$from = _options.from,\n      from = _options$from === void 0 ? 0 : _options$from,\n      _options$to = _options.to,\n      to = _options$to === void 0 ? 10 : _options$to,\n      _options$size = _options.size,\n      size = _options$size === void 0 ? input.length : _options$size,\n      step = _options.step;\n\n  if (size && step) {\n    throw new Error('step is defined by the array size');\n  }\n\n  if (!size) {\n    if (step) {\n      size = Math.floor((to - from) / step) + 1;\n    } else {\n      size = to - from + 1;\n    }\n  }\n\n  if (!step && size) {\n    step = (to - from) / (size - 1);\n  }\n\n  if (Array.isArray(input)) {\n    input.length = 0; // only works with normal array\n\n    for (var i = 0; i < size; i++) {\n      input.push(from);\n      from += step;\n    }\n  } else {\n    if (input.length !== size) {\n      throw new Error('sequentialFill typed array must have the correct length');\n    }\n\n    for (var _i = 0; _i < size; _i++) {\n      input[_i] = from;\n      from += step;\n    }\n  }\n\n  return input;\n}\n\nexport default sequentialFill;\n","/**\n * Normalize an array of zones:\n * - ensure than from < to\n * - merge overlapping zones\n *\n * The method will always check if from if lower than to and will swap if required.\n * @param {Array} [zones=[]]\n * @param {object} [options={}]\n * @param {number} [options.from=Number.NEGATIVE_INFINITY] Specify min value of a zone\n * @param {number} [options.to=Number.POSITIVE_INFINITY] Specify max value of a zone\n */\n\nexport function normalize(zones = [], options = {}) {\n  if (zones.length === 0) return [];\n  let {\n    from = Number.NEGATIVE_INFINITY,\n    to = Number.POSITIVE_INFINITY,\n  } = options;\n  if (from > to) [from, to] = [to, from];\n\n  zones = JSON.parse(JSON.stringify(zones)).map((zone) =>\n    zone.from > zone.to ? { from: zone.to, to: zone.from } : zone,\n  );\n  zones = zones.sort((a, b) => {\n    if (a.from !== b.from) return a.from - b.from;\n    return a.to - b.to;\n  });\n\n  zones.forEach((zone) => {\n    if (from > zone.from) zone.from = from;\n    if (to < zone.to) zone.to = to;\n  });\n\n  zones = zones.filter((zone) => zone.from <= zone.to);\n  if (zones.length === 0) return [];\n\n  let currentZone = zones[0];\n  let result = [currentZone];\n  for (let i = 1; i < zones.length; i++) {\n    let zone = zones[i];\n    if (zone.from <= currentZone.to) {\n      currentZone.to = zone.to;\n    } else {\n      currentZone = zone;\n      result.push(currentZone);\n    }\n  }\n  return result;\n}\n","/**\n * Function that calculates the integral of the line between two\n * x-coordinates, given the slope and intercept of the line.\n * @param {number} x0\n * @param {number} x1\n * @param {number} slope\n * @param {number} intercept\n * @return {number} integral value.\n */\nexport default function integral(x0, x1, slope, intercept) {\n  return (\n    0.5 * slope * x1 * x1 +\n    intercept * x1 -\n    (0.5 * slope * x0 * x0 + intercept * x0)\n  );\n}\n","import sequentialFill from 'ml-array-sequential-fill';\nimport { zonesWithPoints, invert } from 'ml-zones';\n\nimport equallySpacedSmooth from './equallySpacedSmooth';\nimport equallySpacedSlot from './equallySpacedSlot';\n\n/**\n * Function that returns a Number array of equally spaced numberOfPoints\n * containing a representation of intensities of the spectra arguments x\n * and y.\n *\n * The options parameter contains an object in the following form:\n * from: starting point\n * to: last point\n * numberOfPoints: number of points between from and to\n * variant: \"slot\" or \"smooth\" - smooth is the default option\n *\n * The slot variant consist that each point in the new array is calculated\n * averaging the existing points between the slot that belongs to the current\n * value. The smooth variant is the same but takes the integral of the range\n * of the slot and divide by the step size between two points in the new array.\n *\n * If exclusions zone are present, zones are ignored !\n * @param {object} [arrayXY={}] - object containing 2 properties x and y (both an array)\n * @param {object} [options={}]\n * @param {number} [options.from=x[0]]\n * @param {number} [options.to=x[x.length-1]]\n * @param {string} [options.variant='smooth']\n * @param {number} [options.numberOfPoints=100]\n * @param {Array} [options.exclusions=[]] array of from / to that should be skipped for the generation of the points\n * @param {Array} [options.zones=[]] array of from / to that should be kept\n * @return {object<x: Array, y:Array>} new object with x / y array with the equally spaced data.\n */\n\nexport default function equallySpaced(arrayXY = {}, options = {}) {\n  let { x, y } = arrayXY;\n  let xLength = x.length;\n  let reverse = false;\n  if (x.length > 1 && x[0] > x[1]) {\n    x = x.slice().reverse();\n    y = y.slice().reverse();\n    reverse = true;\n  }\n\n  let {\n    from = x[0],\n    to = x[xLength - 1],\n    variant = 'smooth',\n    numberOfPoints = 100,\n    exclusions = [],\n    zones = [],\n  } = options;\n\n  if (xLength !== y.length) {\n    throw new RangeError(\"the x and y vector doesn't have the same size.\");\n  }\n\n  if (typeof from !== 'number' || isNaN(from)) {\n    throw new RangeError(\"'from' option must be a number\");\n  }\n\n  if (typeof to !== 'number' || isNaN(to)) {\n    throw new RangeError(\"'to' option must be a number\");\n  }\n\n  if (typeof numberOfPoints !== 'number' || isNaN(numberOfPoints)) {\n    throw new RangeError(\"'numberOfPoints' option must be a number\");\n  }\n\n  if (numberOfPoints < 2) {\n    throw new RangeError(\"'numberOfPoints' option must be greater than 1\");\n  }\n\n  if (zones.length === 0) {\n    zones = invert(exclusions, { from, to });\n  }\n\n  zones = zonesWithPoints(zones, numberOfPoints, { from, to });\n\n  let xResult = [];\n  let yResult = [];\n  for (let zone of zones) {\n    let zoneResult = processZone(\n      x,\n      y,\n      zone.from,\n      zone.to,\n      zone.numberOfPoints,\n      variant,\n      reverse,\n    );\n\n    xResult = xResult.concat(zoneResult.x);\n    yResult = yResult.concat(zoneResult.y);\n  }\n  if (reverse) {\n    if (from < to) {\n      return { x: xResult.reverse(), y: yResult.reverse() };\n    } else {\n      return { x: xResult, y: yResult };\n    }\n  } else {\n    if (from < to) {\n      return { x: xResult, y: yResult };\n    } else {\n      return { x: xResult.reverse(), y: yResult.reverse() };\n    }\n  }\n}\n\nfunction processZone(x, y, from, to, numberOfPoints, variant) {\n  if (numberOfPoints < 1) {\n    throw new RangeError('the number of points must be at least 1');\n  }\n\n  let output =\n    variant === 'slot'\n      ? equallySpacedSlot(x, y, from, to, numberOfPoints)\n      : equallySpacedSmooth(x, y, from, to, numberOfPoints);\n\n  return {\n    x: sequentialFill({\n      from,\n      to,\n      size: numberOfPoints,\n    }),\n    y: output,\n  };\n}\n","import { normalize } from './normalize';\n\n/**\n * Convert an array of exclusions and keep only from / to\n *\n * The method will always check if from if lower than to and will swap if required.\n * @param {Array} [exclusions=[]]\n * @param {object} [options={}]\n * @param {number} [options.from=Number.NEGATIVE_INFINITY] Specify min value of zones (after inversion)\n * @param {number} [options.to=Number.POSITIVE_INFINITY] Specify max value of zones (after inversion)\n */\n\nexport function invert(exclusions = [], options = {}) {\n  let {\n    from = Number.NEGATIVE_INFINITY,\n    to = Number.POSITIVE_INFINITY,\n  } = options;\n  if (from > to) [from, to] = [to, from];\n\n  exclusions = normalize(exclusions, { from, to });\n  if (exclusions.length === 0) return [{ from, to }];\n\n  let zones = [];\n  for (let i = 0; i < exclusions.length; i++) {\n    let exclusion = exclusions[i];\n    let nextExclusion = exclusions[i + 1];\n    if (i === 0) {\n      if (exclusion.from > from) {\n        zones.push({ from, to: exclusion.from });\n      }\n    }\n    if (i === exclusions.length - 1) {\n      if (exclusion.to < to) {\n        zones.push({ from: exclusion.to, to });\n      }\n    } else {\n      zones.push({ from: exclusion.to, to: nextExclusion.from });\n    }\n  }\n\n  return zones;\n}\n","import { normalize } from './normalize';\n\n/**\n * Add the number of points per zone to reach a specified total\n * @param {Array} [zones=[]]\n * @param {number} [numberOfPoints] Total number of points to distribute between zones\n * @param {object} [options={}]\n * @param {number} [options.from=Number.NEGATIVE_INFINITY] Specify min value of a zone\n * @param {number} [options.to=Number.POSITIVE_INFINITY] Specify max value of a zone\n */\n\nexport function zonesWithPoints(zones, numberOfPoints, options = {}) {\n  if (zones.length === 0) return zones;\n  zones = normalize(zones, options);\n\n  const totalSize = zones.reduce((previous, current) => {\n    return previous + (current.to - current.from);\n  }, 0);\n\n  let unitsPerPoint = totalSize / numberOfPoints;\n  let currentTotal = 0;\n  for (let i = 0; i < zones.length - 1; i++) {\n    let zone = zones[i];\n    zone.numberOfPoints = Math.min(\n      Math.round((zone.to - zone.from) / unitsPerPoint),\n      numberOfPoints - currentTotal,\n    );\n    currentTotal += zone.numberOfPoints;\n  }\n\n  zones[zones.length - 1].numberOfPoints = numberOfPoints - currentTotal;\n\n  return zones;\n}\n","/**\n * function that retrieves the getEquallySpacedData with the variant \"slot\"\n *\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} from - Initial point\n * @param {number} to - Final point\n * @param {number} numberOfPoints\n * @return {Array} - Array of y's equally spaced with the variant \"slot\"\n */\nexport default function equallySpacedSlot(x, y, from, to, numberOfPoints) {\n  let xLength = x.length;\n\n  let step = (to - from) / (numberOfPoints - 1);\n  let halfStep = step / 2;\n  let lastStep = x[x.length - 1] - x[x.length - 2];\n\n  let start = from - halfStep;\n  let output = new Array(numberOfPoints);\n\n  // Init main variables\n  let min = start;\n  let max = start + step;\n\n  let previousX = -Number.MAX_VALUE;\n  let previousY = 0;\n  let nextX = x[0];\n  let nextY = y[0];\n  let frontOutsideSpectra = 0;\n  let backOutsideSpectra = true;\n\n  let currentValue = 0;\n\n  // for slot algorithm\n  let currentPoints = 0;\n\n  let i = 1; // index of input\n  let j = 0; // index of output\n\n  main: while (true) {\n    if (previousX >= nextX) throw new Error('x must be an increasing serie');\n    while (previousX - max > 0) {\n      // no overlap with original point, just consume current value\n      if (backOutsideSpectra) {\n        currentPoints++;\n        backOutsideSpectra = false;\n      }\n\n      output[j] = currentPoints <= 0 ? 0 : currentValue / currentPoints;\n      j++;\n\n      if (j === numberOfPoints) {\n        break main;\n      }\n\n      min = max;\n      max += step;\n      currentValue = 0;\n      currentPoints = 0;\n    }\n\n    if (previousX > min) {\n      currentValue += previousY;\n      currentPoints++;\n    }\n\n    if (previousX === -Number.MAX_VALUE || frontOutsideSpectra > 1) {\n      currentPoints--;\n    }\n\n    previousX = nextX;\n    previousY = nextY;\n\n    if (i < xLength) {\n      nextX = x[i];\n      nextY = y[i];\n      i++;\n    } else {\n      nextX += lastStep;\n      nextY = 0;\n      frontOutsideSpectra++;\n    }\n  }\n\n  return output;\n}\n","import integral from './integral';\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"smooth\"\n *\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} from - Initial point\n * @param {number} to - Final point\n * @param {number} numberOfPoints\n * @return {Array} - Array of y's equally spaced with the variant \"smooth\"\n */\nexport default function equallySpacedSmooth(x, y, from, to, numberOfPoints) {\n  let xLength = x.length;\n\n  let step = (to - from) / (numberOfPoints - 1);\n  let halfStep = step / 2;\n\n  let output = new Array(numberOfPoints);\n\n  let initialOriginalStep = x[1] - x[0];\n  let lastOriginalStep = x[xLength - 1] - x[xLength - 2];\n\n  // Init main variables\n  let min = from - halfStep;\n  let max = from + halfStep;\n\n  let previousX = Number.MIN_VALUE;\n  let previousY = 0;\n  let nextX = x[0] - initialOriginalStep;\n  let nextY = 0;\n\n  let currentValue = 0;\n  let slope = 0;\n  let intercept = 0;\n  let sumAtMin = 0;\n  let sumAtMax = 0;\n\n  let i = 0; // index of input\n  let j = 0; // index of output\n\n  function getSlope(x0, y0, x1, y1) {\n    return (y1 - y0) / (x1 - x0);\n  }\n\n  let add = 0;\n  main: while (true) {\n    if (previousX <= min && min <= nextX) {\n      add = integral(0, min - previousX, slope, previousY);\n      sumAtMin = currentValue + add;\n    }\n\n    while (nextX - max >= 0) {\n      // no overlap with original point, just consume current value\n      add = integral(0, max - previousX, slope, previousY);\n      sumAtMax = currentValue + add;\n\n      output[j++] = (sumAtMax - sumAtMin) / step;\n\n      if (j === numberOfPoints) {\n        break main;\n      }\n\n      min = max;\n      max += step;\n      sumAtMin = sumAtMax;\n    }\n\n    currentValue += integral(previousX, nextX, slope, intercept);\n\n    previousX = nextX;\n    previousY = nextY;\n\n    if (i < xLength) {\n      nextX = x[i];\n      nextY = y[i];\n      i++;\n    } else if (i === xLength) {\n      nextX += lastOriginalStep;\n      nextY = 0;\n    }\n\n    slope = getSlope(previousX, previousY, nextX, nextY);\n    intercept = -slope * previousX + previousY;\n  }\n\n  return output;\n}\n","import getZones from './getZones';\n\n/**\n * Filter an array x/y based on various criteria\n * x points are expected to be sorted\n *\n * @param {object} points\n * @param {object} [options={}]\n * @param {array} [options.from]\n * @param {array} [options.to]\n * @param {array} [options.exclusions=[]]\n * @return {{x: Array<number>, y: Array<number>}}\n */\n\nexport default function filterX(points, options = {}) {\n  const { x, y } = points;\n  const { from = x[0], to = x[x.length - 1], exclusions = [] } = options;\n\n  let zones = getZones(from, to, exclusions);\n\n\n  let currentZoneIndex = 0;\n  let newX = [];\n  let newY = [];\n  let position = 0;\n  while (position < x.length) {\n    if (\n      x[position] <= zones[currentZoneIndex].to &&\n      x[position] >= zones[currentZoneIndex].from\n    ) {\n      newX.push(x[position]);\n      newY.push(y[position]);\n    } else {\n      if (x[position] > zones[currentZoneIndex].to) {\n        currentZoneIndex++;\n        if (!zones[currentZoneIndex]) break;\n      }\n    }\n    position++;\n  }\n\n  return {\n    x: newX,\n    y: newY\n  };\n}\n","export default function getZones(from, to, exclusions = []) {\n  if (from > to) {\n    [from, to] = [to, from];\n  }\n\n  // in exclusions from and to have to be defined\n  exclusions = exclusions.filter(\n    (exclusion) => exclusion.from !== undefined && exclusion.to !== undefined\n  );\n\n  exclusions = JSON.parse(JSON.stringify(exclusions));\n  // we ensure that from before to\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from > exclusion.to) {\n      [exclusion.to, exclusion.from] = [exclusion.from, exclusion.to];\n    }\n  });\n\n  exclusions.sort((a, b) => a.from - b.from);\n\n  // we will rework the exclusions in order to remove overlap and outside range (from / to)\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from < from) exclusion.from = from;\n    if (exclusion.to > to) exclusion.to = to;\n  });\n  for (let i = 0; i < exclusions.length - 1; i++) {\n    if (exclusions[i].to > exclusions[i + 1].from) {\n      exclusions[i].to = exclusions[i + 1].from;\n    }\n  }\n  exclusions = exclusions.filter((exclusion) => exclusion.from < exclusion.to);\n\n  if (!exclusions || exclusions.length === 0) {\n    return [{ from, to }];\n  }\n\n  let zones = [];\n  let currentFrom = from;\n  for (let exclusion of exclusions) {\n    if (currentFrom < exclusion.from) {\n      zones.push({\n        from: currentFrom,\n        to: exclusion.from\n      });\n    }\n\n    currentFrom = exclusion.to;\n  }\n  if (currentFrom < to) {\n    zones.push({\n      from: currentFrom,\n      to: to\n    });\n  }\n\n  return zones;\n}\n","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = values[0];\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\n/**\n * IEEE Transactions on biomedical engineering, vol. 52, no. 1, january 2005, p. 76-\n * Calculate the standard deviation via the Median of the absolute deviation\n *  The formula for the standard deviation only holds for Gaussian random variables.\n * @returns {{mean: number, stdev: number}}\n */\nexports.robustMeanAndStdev = function robustMeanAndStdev(y) {\n    var mean = 0, stdev = 0;\n    var length = y.length, i = 0;\n    for (i = 0; i < length; i++) {\n        mean += y[i];\n    }\n    mean /= length;\n    var averageDeviations = new Array(length);\n    for (i = 0; i < length; i++)\n        averageDeviations[i] = Math.abs(y[i] - mean);\n    averageDeviations.sort(compareNumbers);\n    if (length % 2 === 1) {\n        stdev = averageDeviations[(length - 1) / 2] / 0.6745;\n    } else {\n        stdev = 0.5 * (averageDeviations[length / 2] + averageDeviations[length / 2 - 1]) / 0.6745;\n    }\n\n    return {\n        mean: mean,\n        stdev: stdev\n    };\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof (alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw 'Vectors do not have the same dimensions';\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    } else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    } else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof (eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = [].concat(values);\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof (standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n","/**\n * Returns the closest index of a `target` in an ordered array\n * @param {array} array\n * @param {number} target\n */\n\nexport function findClosestIndex(array, target) {\n  let low = 0;\n  let high = array.length - 1;\n  let middle = 0;\n  while (high - low > 1) {\n    middle = low + ((high - low) >> 1);\n    if (array[middle] < target) {\n      low = middle;\n    } else if (array[middle] > target) {\n      high = middle;\n    } else {\n      return middle;\n    }\n  }\n\n  if (low < array.length - 1) {\n    if (Math.abs(target - array[low]) < Math.abs(array[low + 1] - target)) {\n      return low;\n    } else {\n      return low + 1;\n    }\n  } else {\n    return low;\n  }\n}\n","/**\n\n/**\n * This function multiply the first array by the second array or a constant value to each element of the first array\n * @param {Array} array1 - the array that will be rotated\n * @param {Array|Number} array2\n * @return {Float64Array}\n */\nexport function multiply(array1, array2) {\n  let isConstant = false;\n  let constant;\n  if (Array.isArray(array2)) {\n    if (array1.length !== array2.length) {\n      throw new Error('sub: size of array1 and array2 must be identical');\n    }\n  } else {\n    isConstant = true;\n    constant = Number(array2);\n  }\n\n  let array3 = new Float64Array(array1.length);\n  if (isConstant) {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] * constant;\n    }\n  } else {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] * array2[i];\n    }\n  }\n\n  return array3;\n}\n","import { multiply } from './multiply';\n\nexport function dotProduct(A, B) {\n  let g = multiply(A, B);\n  let result = 0;\n  for (let i = 0; i < A.length; i++) {\n    result += g[i];\n  }\n  return result;\n}\n","import { dotProduct } from './dotProduct';\n\n/**\n * Calculates the cross-correlation between 2 vectors\n * @param {Array} [A] - fixed array\n * @param {Array} [B] - sweeping array\n * @param {object} [options={}]\n * @param {number} [options.tau = 1] - sweep increment size (in number of points, min = 1, max = A.length)\n * @param {number} [options.lag = A.length - 1] - scalar lag parameter\n */\n\nexport function crossCorrelation(A, B, options = {}) {\n  let { tau = 1, lag = A.length - 1 } = options;\n  let result = new Float64Array(1 + (2 * lag) / tau);\n  if (A.length === B.length) {\n    let n = B.length;\n    let g = new Float64Array(2 * n);\n    let q = new Float64Array(2 * n);\n    for (let i = 0; i < n; i++) {\n      q[n + i] = B[i];\n    }\n    for (let i = n * 2 - (tau - 1); i > 0; i -= tau) {\n      let k = 0;\n      for (let j = i; j < n * 2; j++) {\n        g[k] = q[j];\n        k++;\n      }\n      let w = [];\n      for (let l = 0; l < n; l++) {\n        w[l] = g[l];\n      }\n      result[(k - (n - lag)) / tau] = dotProduct(A, w);\n    }\n  }\n  return result;\n}\n","import { add } from './add';\nimport { autoCorrelation } from './autoCorrelation';\nimport { boxPlot } from './boxPlot';\nimport { correlation } from './correlation';\nimport { crossCorrelation } from './crossCorrelation';\nimport { divide } from './divide';\nimport { findClosestIndex } from './findClosestIndex';\nimport { getFromToIndex } from './getFromToIndex';\nimport { getTargetIndex } from './getTargetIndex';\nimport { multiply } from './multiply';\nimport { rotate } from './rotate';\nimport { subtract } from './subtract';\n\nexport const X = {\n  add,\n  autoCorrelation,\n  boxPlot,\n  correlation,\n  crossCorrelation,\n  divide,\n  findClosestIndex,\n  getFromToIndex,\n  getTargetIndex,\n  multiply,\n  rotate,\n  subtract,\n};\n","/**\n\n/**\n * This function add the first array by the second array or a constant value to each element of the first array\n * @param {Array} array1 - the array that will be rotated\n * @param {Array|Number} array2\n * @return {Array}\n */\nexport function add(array1, array2) {\n  let isConstant = false;\n  let constant;\n  if (Array.isArray(array2)) {\n    if (array1.length !== array2.length) {\n      throw new Error('sub: size of array1 and array2 must be identical');\n    }\n  } else {\n    isConstant = true;\n    constant = Number(array2);\n  }\n\n  let array3 = new Array(array1.length);\n  if (isConstant) {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] + constant;\n    }\n  } else {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] + array2[i];\n    }\n  }\n\n  return array3;\n}\n","import { crossCorrelation } from './crossCorrelation';\n\n/**\n * Calculates the auto-correlation of a vector\n * @param {Array} [A] - the array that will be fixed\n * @param {object} [options={}]\n * @param {number} [options.tau = 1] - sweep increment size (in number of points, min = 1, max = A.length)\n * @param {number} [options.lag = A.length - 1] - scalar lag parameter\n */\n\nexport function autoCorrelation(A, options = {}) {\n  return crossCorrelation(A, A, options);\n}\n","/**\n * This function subtract the first array by the second array or a constant value from each element of the first array\n * @param {Array} array1 - the array that will be rotated\n * @return {object}\n */\nexport function boxPlot(array) {\n  array = array.slice(0).sort((a, b) => a - b);\n  if (array.length < 5) {\n    throw Error(\n      'boxPlot: can not calculate info if array contains less than 3 elements',\n    );\n  }\n  let info = {\n    Q1: 0.0,\n    Q2: 0.0,\n    Q3: 0.0,\n    min: array[0],\n    max: array[array.length - 1],\n  };\n  let q1max, q3min;\n  if (array.length % 2 === 1) {\n    // odd\n    let middle = (array.length - 1) / 2;\n    info.Q2 = array[middle];\n    q1max = middle - 1;\n    q3min = middle + 1;\n  } else {\n    // even\n    q3min = array.length / 2;\n    q1max = q3min - 1;\n    info.Q2 = (array[q1max] + array[q3min]) / 2;\n  }\n  if (q1max % 2 === 0) {\n    info.Q1 = array[q1max / 2];\n    info.Q3 = array[(array.length + q3min - 1) / 2];\n  } else {\n    info.Q1 = (array[(q1max + 1) / 2] + array[(q1max - 1) / 2]) / 2;\n    let middleOver = (array.length + q3min) / 2;\n    info.Q3 = (array[middleOver] + array[middleOver - 1]) / 2;\n  }\n  return info;\n}\n","/**\n\n/**\n * Calculates the correlation between 2 vectors\n * https://en.wikipedia.org/wiki/Correlation_and_dependence\n *\n * @param {Array} [A] - the array that will be rotated\n * @param {Array} [B]\n * @return {Array}\n */\nexport function correlation(A, B) {\n  let n = A.length;\n  let sumA = 0;\n  let sumA2 = 0;\n  let sumB = 0;\n  let sumB2 = 0;\n  let sumAB = 0;\n  for (let i = 0; i < n; i++) {\n    let a = A[i];\n    let b = B[i];\n    sumA += a;\n    sumA2 += a ** 2;\n    sumB += b;\n    sumB2 += b ** 2;\n    sumAB += a * b;\n  }\n  return (\n    (n * sumAB - sumA * sumB) /\n    (Math.sqrt(n * sumA2 - sumA ** 2) * Math.sqrt(n * sumB2 - sumB ** 2))\n  );\n}\n","/**\n\n/**\n * This function divide the first array by the second array or a constant value to each element of the first array\n * @param {Array} array1 - the array that will be rotated\n * @param {Array|Number} array2\n * @return {Array}\n */\nexport function divide(array1, array2) {\n  let isConstant = false;\n  let constant;\n  if (Array.isArray(array2)) {\n    if (array1.length !== array2.length) {\n      throw new Error('sub: size of array1 and array2 must be identical');\n    }\n  } else {\n    isConstant = true;\n    constant = Number(array2);\n  }\n\n  let array3 = new Array(array1.length);\n  if (isConstant) {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] / constant;\n    }\n  } else {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] / array2[i];\n    }\n  }\n\n  return array3;\n}\n","import { findClosestIndex } from './findClosestIndex';\n\n/**\n * Returns an object with {fromIndex, toIndex} for a specific from / to\n * @param {array} x\n * @param {object} [options={}]\n * @param {number} [options.from] - First value for integration in the X scale\n * @param {number} [options.fromIndex=0] - First point for integration\n * @param {number} [options.to] - Last value for integration in the X scale\n * @param {number} [options.toIndex=x.length-1] - Last point for integration\n */\n\nexport function getFromToIndex(x, options = {}) {\n  let { fromIndex, toIndex, from, to } = options;\n\n  if (fromIndex === undefined) {\n    if (from !== undefined) {\n      fromIndex = findClosestIndex(x, from);\n    } else {\n      fromIndex = 0;\n    }\n  }\n  if (toIndex === undefined) {\n    if (to !== undefined) {\n      toIndex = findClosestIndex(x, to);\n    } else {\n      toIndex = x.length - 1;\n    }\n  }\n  if (fromIndex > toIndex) [fromIndex, toIndex] = [toIndex, fromIndex];\n  return { fromIndex, toIndex };\n}\n","import { findClosestIndex } from './findClosestIndex';\n\n/**\n *  Returns the targetIndex\n * @param {array} [x]\n * @param {object} [options={}]\n * @param {number} [options.target]\n * @param {number} [options.targetIndex=0]\n * @param {number}\n */\n\nexport function getTargetIndex(x, options = {}) {\n  let { target, targetIndex } = options;\n  if (targetIndex === undefined) {\n    if (target !== undefined) {\n      return findClosestIndex(x, target);\n    } else {\n      return 0;\n    }\n  }\n  return targetIndex;\n}\n","/**\n * This function performs a circular shift to a new array\n * Positive values of shifts will shift to the right and negative values will do to the left\n * @example rotate([1,2,3,4],1) -> [4,1,2,3]\n * @example rotate([1,2,3,4],-1) -> [2,3,4,1]\n * @param {Array} array - the array that will be rotated\n * @param {number} shift\n * @return {Array}\n */\nexport function rotate(array, shift) {\n  shift = shift % array.length;\n  if (shift < 0) shift += array.length;\n  return array\n    .slice(array.length - shift)\n    .concat(array.slice(0, array.length - shift));\n}\n","/**\n * This function subtract the first array by the second array or a constant value from each element of the first array\n * @param {Array} array1 - the array that will be rotated\n * @param {Array|Number} array2\n * @return {Array}\n */\nexport function subtract(array1, array2) {\n  let isConstant = false;\n  let constant;\n  if (Array.isArray(array2)) {\n    if (array1.length !== array2.length) {\n      throw new Error('sub: size of array1 and array2 must be identical');\n    }\n  } else {\n    isConstant = true;\n    constant = Number(array2);\n  }\n\n  let array3 = new Array(array1.length);\n  if (isConstant) {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] - constant;\n    }\n  } else {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] - array2[i];\n    }\n  }\n\n  return array3;\n}\n","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n","export function inspectMatrix() {\n  const indent = ' '.repeat(2);\n  const indentData = ' '.repeat(4);\n  return `${this.constructor.name} {\n${indent}[\n${indentData}${inspectData(this, indentData)}\n${indent}]\n${indent}rows: ${this.rows}\n${indent}columns: ${this.columns}\n}`;\n}\n\nconst maxRows = 15;\nconst maxColumns = 10;\nconst maxNumSize = 8;\n\nfunction inspectData(matrix, indent) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j)));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indent}`);\n}\n\nfunction formatNumber(num) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.substring(eIndex);\n  return exponential.substring(0, maxNumSize - e.length) + e;\n}\n","import rescale from 'ml-array-rescale';\n\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n} from './util';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport { inspectMatrix } from './inspect';\nimport { installMathOperations } from './mathOperations';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      rescale(row, { min, max, output: row });\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      rescale(column, {\n        min: min,\n        max: max,\n        output: column,\n      });\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array, true));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n","import { AbstractMatrix } from '../matrix';\n\nexport default class BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n","import BaseView from './base';\r\n\r\nexport default class MatrixTransposeView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.columns, matrix.rows);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(columnIndex, rowIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(columnIndex, rowIndex);\r\n  }\r\n}\r\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n","export function hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let iter = 0;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\n\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n","'use strict';\n\nvar defaultOptions = {\n  size: 1,\n  value: 0\n};\n\n/**\n * Case when the entry is an array\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction arrayCase(data, options) {\n  var len = data.length;\n  if (typeof options.size === 'number') {\n    options.size = [options.size, options.size];\n  }\n\n  var cond = len + options.size[0] + options.size[1];\n\n  var output;\n  if (options.output) {\n    if (options.output.length !== cond) {\n      throw new RangeError('Wrong output size');\n    }\n    output = options.output;\n  } else {\n    output = new Array(cond);\n  }\n\n  var i;\n  if (options.value === 'circular') {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) {\n        output[i] = data[(len - (options.size[0] % len) + i) % len];\n      } else if (i < options.size[0] + len) {\n        output[i] = data[i - options.size[0]];\n      } else {\n        output[i] = data[(i - options.size[0]) % len];\n      }\n    }\n  } else if (options.value === 'replicate') {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = data[0];\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = data[len - 1];\n    }\n  } else if (options.value === 'symmetric') {\n    if (options.size[0] > len || options.size[1] > len) {\n      throw new RangeError(\n        'expanded value should not be bigger than the data length'\n      );\n    }\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = data[options.size[0] - 1 - i];\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = data[2 * len + options.size[0] - i - 1];\n    }\n  } else {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = options.value;\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = options.value;\n    }\n  }\n\n  return output;\n}\n\n/**\n * Case when the entry is a matrix\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction matrixCase(data, options) {\n  // var row = data.length;\n  // var col = data[0].length;\n  if (options.size[0] === undefined) {\n    options.size = [options.size, options.size, options.size, options.size];\n  }\n  throw new Error('matrix not supported yet, sorry');\n}\n\n/**\n * Pads and array\n * @param {Array <number>} data\n * @param {object} options\n */\nfunction padArray(data, options) {\n  options = Object.assign({}, defaultOptions, options);\n  if (Array.isArray(data)) {\n    if (Array.isArray(data[0])) return matrixCase(data, options);\n    else return arrayCase(data, options);\n  } else {\n    throw new TypeError('data should be an array');\n  }\n}\n\nmodule.exports = padArray;\n","import { Matrix, MatrixTransposeView, inverse } from 'ml-matrix';\nimport padArray from 'ml-pad-array';\n\n/**\n * Factorial of a number\n * @ignore\n * @param n\n * @return {number}\n */\nfunction factorial(n) {\n  let r = 1;\n  while (n > 0) r *= n--;\n  return r;\n}\n\nconst defaultOptions = {\n  windowSize: 5,\n  derivative: 1,\n  polynomial: 2,\n  pad: 'none',\n  padValue: 'replicate',\n};\n\n/**\n * Savitzky-Golay filter\n * @param {Array <number>} data\n * @param {number} h\n * @param {Object} options\n * @returns {Array}\n */\nexport default function savitzkyGolay(data, h, options) {\n  options = Object.assign({}, defaultOptions, options);\n  if (\n    options.windowSize % 2 === 0 ||\n    options.windowSize < 5 ||\n    !Number.isInteger(options.windowSize)\n  ) {\n    throw new RangeError(\n      'Invalid window size (should be odd and at least 5 integer number)',\n    );\n  }\n  if (options.derivative < 0 || !Number.isInteger(options.derivative)) {\n    throw new RangeError('Derivative should be a positive integer');\n  }\n  if (options.polynomial < 1 || !Number.isInteger(options.polynomial)) {\n    throw new RangeError('Polynomial should be a positive integer');\n  }\n\n  let C, norm;\n  let step = Math.floor(options.windowSize / 2);\n\n  if (options.pad === 'pre') {\n    data = padArray(data, { size: step, value: options.padValue });\n  }\n\n  let ans = new Array(data.length - 2 * step);\n\n  if (\n    options.windowSize === 5 &&\n    options.polynomial === 2 &&\n    (options.derivative === 1 || options.derivative === 2)\n  ) {\n    if (options.derivative === 1) {\n      C = [-2, -1, 0, 1, 2];\n      norm = 10;\n    } else {\n      C = [2, -1, -2, -1, 2];\n      norm = 7;\n    }\n  } else {\n    let J = Matrix.ones(options.windowSize, options.polynomial + 1);\n    let inic = -(options.windowSize - 1) / 2;\n    for (let i = 0; i < J.rows; i++) {\n      for (let j = 0; j < J.columns; j++) {\n        if (inic + 1 !== 0 || j !== 0) J.set(i, j, Math.pow(inic + i, j));\n      }\n    }\n    let Jtranspose = new MatrixTransposeView(J);\n    let Jinv = inverse(Jtranspose.mmul(J));\n    C = Jinv.mmul(Jtranspose);\n    C = C.getRow(options.derivative);\n    norm = 1 / factorial(options.derivative);\n  }\n  let det = norm * Math.pow(h, options.derivative);\n  for (let k = step; k < data.length - step; k++) {\n    let d = 0;\n    for (let l = 0; l < C.length; l++) d += (C[l] * data[l + k - step]) / det;\n    ans[k - step] = d;\n  }\n\n  if (options.pad === 'post') {\n    ans = padArray(ans, { size: step, value: options.padValue });\n  }\n\n  return ans;\n}\n","import getNormalized from './util/getNormalized';\n\nconst DEFAULT_FLAVOR = 'weightVersusTemperature';\n\n/**\n * Class allowing to store and manipulate a spectrum\n * @class Spectrum\n * @param {object} [options={}]\n * @param {string} [options.id=randomString] unique identifier\n * @param {string} [options.label] human redeable label\n */\nexport default class Spectrum {\n  constructor(options = {}) {\n    this.id = options.id || Math.random().toString(36).substring(2, 10);\n    this.label = options.label || this.id;\n    this.flavors = {};\n  }\n\n  set(points, options = {}) {\n    const { flavor = DEFAULT_FLAVOR } = options;\n    this.flavors[flavor.toLowerCase()] = standardizeData(points, options);\n  }\n\n  get(flavor = DEFAULT_FLAVOR) {\n    flavor = flavor.toLowerCase();\n    if (!this.flavors[flavor]) {\n      return undefined;\n    }\n    return this.flavors[flavor];\n  }\n\n  getData(options = {}) {\n    const { flavor, normalization } = options;\n    let data = this.get(flavor);\n    if (!data) return undefined;\n    return getNormalized(data, normalization);\n  }\n\n  getXLabel(flavor) {\n    return this.get(flavor).xLabel;\n  }\n\n  getYLabel(flavor) {\n    return this.get(flavor).yLabel;\n  }\n}\n\nfunction standardizeData(points, options = {}) {\n  const { meta = {}, tmp = {}, xLabel = '', yLabel = '', title = '' } = options;\n  let { x, y } = points;\n  if (x && x.length > 1 && x[0] > x[x.length - 1]) {\n    x = x.reverse();\n    y = y.reverse();\n  } else {\n    x = x || [];\n    y = y || [];\n  }\n  points = { x, y };\n\n  return {\n    x: points.x,\n    y: points.y,\n    xLabel,\n    yLabel,\n    title,\n    meta,\n    tmp,\n  };\n}\n","import normed from 'ml-array-normed';\nimport rescale from 'ml-array-rescale';\nimport equallySpaced from 'ml-array-xy-equally-spaced';\nimport filterX from 'ml-array-xy-filter-x';\nimport Stat from 'ml-stat/array';\nimport { X } from 'ml-spectra-processing';\nimport savitzkyGolay from 'ml-savitzky-golay';\n/**\n *\n * @private\n * @param {object} spectrum\n * @param {object} [options={}]\n * @param {number} [options.from=spectrum.x[0]]\n * @param {number} [options.to=spectrum.x[spectrum.x.length-1]]\n * @param {number} [options.numberOfPoints]\n * @param {Array} [options.filters=[]]\n * @param {Array} [options.exclusions=[]]\n */\nexport default function getNormalized(spectrum, options = {}) {\n  let {\n    from = spectrum.x[0],\n    to = spectrum.x[spectrum.x.length - 1],\n    numberOfPoints,\n    filters = [],\n    exclusions = [],\n    processing = '',\n  } = options;\n\n  let { x, y } = filterX(spectrum, { from, to });\n\n  switch (processing) {\n    case 'firstDerivative':\n      if (options.processing) {\n        y = savitzkyGolay(y, 1, {\n          derivative: 1,\n          polynomial: 2,\n          windowSize: 5,\n        });\n        x = x.slice(2, x.length - 2);\n      }\n      break;\n    case 'secondDerivative':\n      if (options.processing) {\n        y = savitzkyGolay(y, 1, {\n          derivative: 2,\n          polynomial: 2,\n          windowSize: 5,\n        });\n        x = x.slice(2, x.length - 2);\n      }\n      break;\n    default:\n  }\n\n  for (let filter of filters) {\n    let filterOptions = filter.options || {};\n    switch (filter.name) {\n      case 'centerMean': {\n        let mean = Stat.mean(y);\n        y = X.subtract(mean);\n        break;\n      }\n      case 'scaleSD': {\n        let std = Stat.standardDeviation(y);\n        y = X.divide(std);\n        break;\n      }\n      case 'normalize': {\n        // should be an integration in fact\n        y = normed(y, {\n          sumValue: filterOptions.value ? Number(filterOptions.value) : 1,\n          algorithm: 'absolute',\n        });\n        break;\n      }\n      case 'rescale': {\n        y = rescale(y, {\n          min: filterOptions.min ? Number(filter.options.min) : 0,\n          max: filterOptions.max ? Number(filter.options.max) : 1,\n        });\n        break;\n      }\n      case '':\n      case undefined:\n        break;\n      default:\n        throw new Error(`Unknown process kind: ${process.kind}`);\n    }\n  }\n\n  if (!numberOfPoints) {\n    return filterX({ x, y }, { from, to, exclusions });\n  }\n\n  return equallySpaced({ x, y }, { from, to, numberOfPoints, exclusions });\n}\n","export default function parsePerkinElmer(text) {\n  let lines = text.split(/[\\r\\n]+/);\n  let result = { meta: {}, data: { time: [], weight: [], temperature: [] } };\n  let section = '';\n  let inMethodSteps = false;\n  for (let line of lines) {\n    if (inMethodSteps) {\n      if (line.startsWith('1) TGA')) {\n        inMethodSteps = false;\n      } else {\n        if (!result.meta['Method Steps']) result.meta['Method Steps'] = '';\n        result.meta['Method Steps'] += `${line.replace(/\\t/g, '  ')}\\n`;\n      }\n    } else if (line.match(/^[a-zA-Z -]+$/)) {\n      section = trim(line);\n    } else if (line.match(/.*:.*/)) {\n      let position = line.indexOf(':');\n      let description = line.substring(0, position);\n      let value = trim(line.substring(position + 1));\n      result.meta[(section ? `${section}_` : '') + description] = value;\n    } else if (line.match(/^[0-9\\t .]+$/)) {\n      let fields = line.replace(/^\\t/, '').split('\\t');\n      result.data.time.push(Number(fields[0]));\n      result.data.weight.push(Number(fields[1]));\n      result.data.temperature.push(Number(fields[4]));\n    } else {\n      //  console.log('Problem: ', line);\n    }\n    if (line.startsWith('Method Steps:')) {\n      inMethodSteps = true;\n    }\n  }\n  return result;\n}\n\nfunction trim(string) {\n  return string.replace(/^[ \\t]*(.*?)[ \\t]*$/, '$1');\n}\n","const GC_MS_FIELDS = ['TIC', '.RIC', 'SCANNUMBER'];\n\nexport function complexChromatogram(result) {\n  let spectra = result.spectra;\n  let length = spectra.length;\n  let chromatogram = {\n    times: new Array(length),\n    series: {\n      ms: {\n        dimension: 2,\n        data: new Array(length),\n      },\n    },\n  };\n\n  let existingGCMSFields = [];\n  for (let i = 0; i < GC_MS_FIELDS.length; i++) {\n    let label = convertMSFieldToLabel(GC_MS_FIELDS[i]);\n    if (spectra[0][label]) {\n      existingGCMSFields.push(label);\n      chromatogram.series[label] = {\n        dimension: 1,\n        data: new Array(length),\n      };\n    }\n  }\n\n  for (let i = 0; i < length; i++) {\n    let spectrum = spectra[i];\n    chromatogram.times[i] = spectrum.pageValue;\n    for (let j = 0; j < existingGCMSFields.length; j++) {\n      chromatogram.series[existingGCMSFields[j]].data[i] = parseFloat(\n        spectrum[existingGCMSFields[j]],\n      );\n    }\n    if (spectrum.data) {\n      chromatogram.series.ms.data[i] = [spectrum.data.x, spectrum.data.y];\n    }\n  }\n  result.chromatogram = chromatogram;\n}\n\nexport function isMSField(canonicDataLabel) {\n  return GC_MS_FIELDS.indexOf(canonicDataLabel) !== -1;\n}\n\nexport function convertMSFieldToLabel(value) {\n  return value.toLowerCase().replace(/[^a-z0-9]/g, '');\n}\n","export default function convertToFloatArray(stringArray) {\n  let floatArray = [];\n  for (let i = 0; i < stringArray.length; i++) {\n    floatArray.push(parseFloat(stringArray[i]));\n  }\n  return floatArray;\n}\n","export default function fastParseXYData(spectrum, value) {\n  // TODO need to deal with result\n  //  console.log(value);\n  // we check if deltaX is defined otherwise we calculate it\n\n  let yFactor = spectrum.yFactor;\n  let deltaX = spectrum.deltaX;\n\n  spectrum.isXYdata = true;\n  // TODO to be improved using 2 array {x:[], y:[]}\n  let currentData = [];\n  spectrum.data = currentData;\n\n  let currentX = spectrum.firstX;\n  let currentY = spectrum.firstY;\n\n  // we skip the first line\n  //\n  let endLine = false;\n  let ascii;\n  let i = 0;\n  for (; i < value.length; i++) {\n    ascii = value.charCodeAt(i);\n    if (ascii === 13 || ascii === 10) {\n      endLine = true;\n    } else {\n      if (endLine) break;\n    }\n  }\n\n  // we proceed taking the i after the first line\n  let newLine = true;\n  let isDifference = false;\n  let isLastDifference = false;\n  let lastDifference = 0;\n  let isDuplicate = false;\n  let inComment = false;\n  let currentValue = 0; // can be a difference or a duplicate\n  let lastValue = 0; // must be the real last value\n  let isNegative = false;\n  let inValue = false;\n  let skipFirstValue = false;\n  let decimalPosition = 0;\n  for (; i <= value.length; i++) {\n    if (i === value.length) ascii = 13;\n    else ascii = value.charCodeAt(i);\n    if (inComment) {\n      // we should ignore the text if we are after $$\n      if (ascii === 13 || ascii === 10) {\n        newLine = true;\n        inComment = false;\n      }\n    } else {\n      // when is it a new value ?\n      // when it is not a digit, . or comma\n      // it is a number that is either new or we continue\n      if (ascii <= 57 && ascii >= 48) {\n        // a number\n        inValue = true;\n        if (decimalPosition > 0) {\n          currentValue += (ascii - 48) / Math.pow(10, decimalPosition++);\n        } else {\n          currentValue *= 10;\n          currentValue += ascii - 48;\n        }\n      } else if (ascii === 44 || ascii === 46) {\n        // a \",\" or \".\"\n        inValue = true;\n        decimalPosition++;\n      } else {\n        if (inValue) {\n          // need to process the previous value\n          if (newLine) {\n            newLine = false; // we don't check the X value\n            // console.log(\"NEW LINE\",isDifference, lastDifference);\n            // if new line and lastDifference, the first value is just a check !\n            // that we don't check ...\n            if (isLastDifference) skipFirstValue = true;\n          } else {\n            // need to deal with duplicate and differences\n            if (skipFirstValue) {\n              skipFirstValue = false;\n            } else {\n              if (isDifference) {\n                lastDifference = isNegative ? 0 - currentValue : currentValue;\n                isLastDifference = true;\n                isDifference = false;\n              } else if (!isDuplicate) {\n                lastValue = isNegative ? 0 - currentValue : currentValue;\n              }\n              let duplicate = isDuplicate ? currentValue - 1 : 1;\n              for (let j = 0; j < duplicate; j++) {\n                if (isLastDifference) {\n                  currentY += lastDifference;\n                } else {\n                  currentY = lastValue;\n                }\n                currentData.push(currentX);\n                currentData.push(currentY * yFactor);\n                currentX += deltaX;\n              }\n            }\n          }\n          isNegative = false;\n          currentValue = 0;\n          decimalPosition = 0;\n          inValue = false;\n          isDuplicate = false;\n        }\n\n        // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n        if (ascii < 74 && ascii > 63) {\n          inValue = true;\n          isLastDifference = false;\n          currentValue = ascii - 64;\n        } else if (ascii > 96 && ascii < 106) {\n          // negative SQZ digits a b c d e f g h i (ascii 97-105)\n          inValue = true;\n          isLastDifference = false;\n          currentValue = ascii - 96;\n          isNegative = true;\n        } else if (ascii === 115) {\n          // DUP digits S T U V W X Y Z s (ascii 83-90, 115)\n          inValue = true;\n          isDuplicate = true;\n          currentValue = 9;\n        } else if (ascii > 82 && ascii < 91) {\n          inValue = true;\n          isDuplicate = true;\n          currentValue = ascii - 82;\n        } else if (ascii > 73 && ascii < 83) {\n          // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n          inValue = true;\n          isDifference = true;\n          currentValue = ascii - 73;\n        } else if (ascii > 105 && ascii < 115) {\n          // negative DIF digits j k l m n o p q r (ascii 106-114)\n          inValue = true;\n          isDifference = true;\n          currentValue = ascii - 105;\n          isNegative = true;\n        } else if (ascii === 36 && value.charCodeAt(i + 1) === 36) {\n          // $ sign, we need to check the next one\n          inValue = true;\n          inComment = true;\n        } else if (ascii === 37) {\n          // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n          inValue = true;\n          isDifference = true;\n          currentValue = 0;\n          isNegative = false;\n        } else if (ascii === 45) {\n          // a \"-\"\n          // check if after there is a number, decimal or comma\n          let ascii2 = value.charCodeAt(i + 1);\n          if (\n            (ascii2 >= 48 && ascii2 <= 57) ||\n            ascii2 === 44 ||\n            ascii2 === 46\n          ) {\n            inValue = true;\n            if (!newLine) isLastDifference = false;\n            isNegative = true;\n          }\n        } else if (ascii === 13 || ascii === 10) {\n          newLine = true;\n          inComment = false;\n        }\n        // and now analyse the details ... space or tabulation\n        // if \"+\" we just don't care\n      }\n    }\n  }\n}\n","export default function parsePeakTable(spectrum, value, result) {\n  let removeCommentRegExp = /\\$\\$.*/;\n  let peakTableSplitRegExp = /[,\\t ]+/;\n\n  spectrum.isPeaktable = true;\n  let values;\n  let currentData = [];\n  spectrum.data = currentData;\n\n  // counts for around 20% of the time\n  let lines = value.split(/,? *,?[;\\r\\n]+ */);\n\n  for (let i = 1; i < lines.length; i++) {\n    values = lines[i]\n      .trim()\n      .replace(removeCommentRegExp, '')\n      .split(peakTableSplitRegExp);\n    if (values.length % 2 === 0) {\n      for (let j = 0; j < values.length; j = j + 2) {\n        // takes around 40% of the time to add and parse the 2 values nearly exclusively because of parseFloat\n        currentData.push(parseFloat(values[j]) * spectrum.xFactor);\n        currentData.push(parseFloat(values[j + 1]) * spectrum.yFactor);\n      }\n    } else {\n      result.logs.push(`Format error: ${values}`);\n    }\n  }\n}\n","export default function parseXYA(spectrum, value) {\n  let removeSymbolRegExp = /(\\(+|\\)+|<+|>+|\\s+)/g;\n\n  spectrum.isXYAdata = true;\n  let values;\n  let currentData = [];\n  spectrum.data = currentData;\n\n  let lines = value.split(/,? *,?[;\\r\\n]+ */);\n\n  for (let i = 1; i < lines.length; i++) {\n    values = lines[i].trim().replace(removeSymbolRegExp, '').split(',');\n    currentData.push(parseFloat(values[0]));\n    currentData.push(parseFloat(values[1]));\n  }\n}\n","(function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i)}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1)}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return~~((d+e)/2)};'undefined'!=typeof module&&module.exports?module.exports=a:window.median=a})();\n","import isArray from 'is-any-array';\nimport quickSelectMedian from 'median-quickselect';\n\n/**\n * Computes the median of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction median(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  return quickSelectMedian(input.slice());\n}\n\nexport default median;\n","import convertTo3DZ from './convertTo3DZ';\nimport generateContourLines from './generateContourLines';\n\nexport default function add2D(result, options) {\n  let zData = convertTo3DZ(result.spectra);\n  if (!options.noContour) {\n    result.contourLines = generateContourLines(zData, options);\n    delete zData.z;\n  }\n  result.minMax = zData;\n}\n","import getMedian from 'ml-array-median';\n\nexport default function convertTo3DZ(spectra) {\n  let minZ = spectra[0].data[0];\n  let maxZ = minZ;\n  let ySize = spectra.length;\n  let xSize = spectra[0].data.length / 2;\n  let z = new Array(ySize);\n  for (let i = 0; i < ySize; i++) {\n    z[i] = new Array(xSize);\n    let xVector = spectra[i].data;\n    for (let j = 0; j < xSize; j++) {\n      let value = xVector[j * 2 + 1];\n      z[i][j] = value;\n      if (value < minZ) minZ = value;\n      if (value > maxZ) maxZ = value;\n    }\n  }\n\n  const firstX = spectra[0].data[0];\n  const lastX = spectra[0].data[spectra[0].data.length - 2]; // has to be -2 because it is a 1D array [x,y,x,y,...]\n  const firstY = spectra[0].pageValue;\n  const lastY = spectra[ySize - 1].pageValue;\n\n  // Because the min / max value are the only information about the matrix if we invert\n  // min and max we need to invert the array\n  if (firstX > lastX) {\n    for (let spectrum of z) {\n      spectrum.reverse();\n    }\n  }\n  if (firstY > lastY) {\n    z.reverse();\n  }\n\n  return {\n    z: z,\n    minX: Math.min(firstX, lastX),\n    maxX: Math.max(firstX, lastX),\n    minY: Math.min(firstY, lastY),\n    maxY: Math.max(firstY, lastY),\n    minZ: minZ,\n    maxZ: maxZ,\n    noise: getMedian(z[0].map(Math.abs)),\n  };\n}\n","export default function generateContourLines(zData, options) {\n  let noise = zData.noise;\n  let z = zData.z;\n  let povarHeight0, povarHeight1, povarHeight2, povarHeight3;\n  let isOver0, isOver1, isOver2, isOver3;\n  let nbSubSpectra = z.length;\n  let nbPovars = z[0].length;\n  let pAx, pAy, pBx, pBy;\n\n  let x0 = zData.minX;\n  let xN = zData.maxX;\n  let dx = (xN - x0) / (nbPovars - 1);\n  let y0 = zData.minY;\n  let yN = zData.maxY;\n  let dy = (yN - y0) / (nbSubSpectra - 1);\n  let minZ = zData.minZ;\n  let maxZ = zData.maxZ;\n\n  // System.out.prvarln('y0 '+y0+' yN '+yN);\n  // -------------------------\n  // Povars attribution\n  //\n  // 0----1\n  // |  / |\n  // | /  |\n  // 2----3\n  //\n  // ---------------------d------\n\n  let iter = options.nbContourLevels * 2;\n  let contourLevels = new Array(iter);\n  let lineZValue;\n  for (let level = 0; level < iter; level++) {\n    // multiply by 2 for positif and negatif\n    let contourLevel = {};\n    contourLevels[level] = contourLevel;\n    let side = level % 2;\n    let factor =\n      (maxZ - options.noiseMultiplier * noise) *\n      Math.exp((level >> 1) - options.nbContourLevels);\n    if (side === 0) {\n      lineZValue = factor + options.noiseMultiplier * noise;\n    } else {\n      lineZValue = 0 - factor - options.noiseMultiplier * noise;\n    }\n    let lines = [];\n    contourLevel.zValue = lineZValue;\n    contourLevel.lines = lines;\n\n    if (lineZValue <= minZ || lineZValue >= maxZ) continue;\n\n    for (let iSubSpectra = 0; iSubSpectra < nbSubSpectra - 1; iSubSpectra++) {\n      let subSpectra = z[iSubSpectra];\n      let subSpectraAfter = z[iSubSpectra + 1];\n      for (let povar = 0; povar < nbPovars - 1; povar++) {\n        povarHeight0 = subSpectra[povar];\n        povarHeight1 = subSpectra[povar + 1];\n        povarHeight2 = subSpectraAfter[povar];\n        povarHeight3 = subSpectraAfter[povar + 1];\n\n        isOver0 = povarHeight0 > lineZValue;\n        isOver1 = povarHeight1 > lineZValue;\n        isOver2 = povarHeight2 > lineZValue;\n        isOver3 = povarHeight3 > lineZValue;\n\n        // Example povar0 is over the plane and povar1 and\n        // povar2 are below, we find the varersections and add\n        // the segment\n        if (isOver0 !== isOver1 && isOver0 !== isOver2) {\n          pAx =\n            povar + (lineZValue - povarHeight0) / (povarHeight1 - povarHeight0);\n          pAy = iSubSpectra;\n          pBx = povar;\n          pBy =\n            iSubSpectra +\n            (lineZValue - povarHeight0) / (povarHeight2 - povarHeight0);\n          lines.push(pAx * dx + x0);\n          lines.push(pAy * dy + y0);\n          lines.push(pBx * dx + x0);\n          lines.push(pBy * dy + y0);\n        }\n        // remove push does not help !!!!\n        if (isOver3 !== isOver1 && isOver3 !== isOver2) {\n          pAx = povar + 1;\n          pAy =\n            iSubSpectra +\n            1 -\n            (lineZValue - povarHeight3) / (povarHeight1 - povarHeight3);\n          pBx =\n            povar +\n            1 -\n            (lineZValue - povarHeight3) / (povarHeight2 - povarHeight3);\n          pBy = iSubSpectra + 1;\n          lines.push(pAx * dx + x0);\n          lines.push(pAy * dy + y0);\n          lines.push(pBx * dx + x0);\n          lines.push(pBy * dy + y0);\n        }\n        // test around the diagonal\n        if (isOver1 !== isOver2) {\n          pAx =\n            (povar +\n              1 -\n              (lineZValue - povarHeight1) / (povarHeight2 - povarHeight1)) *\n              dx +\n            x0;\n          pAy =\n            (iSubSpectra +\n              (lineZValue - povarHeight1) / (povarHeight2 - povarHeight1)) *\n              dy +\n            y0;\n          if (isOver1 !== isOver0) {\n            pBx =\n              povar +\n              1 -\n              (lineZValue - povarHeight1) / (povarHeight0 - povarHeight1);\n            pBy = iSubSpectra;\n            lines.push(pAx);\n            lines.push(pAy);\n            lines.push(pBx * dx + x0);\n            lines.push(pBy * dy + y0);\n          }\n          if (isOver2 !== isOver0) {\n            pBx = povar;\n            pBy =\n              iSubSpectra +\n              1 -\n              (lineZValue - povarHeight2) / (povarHeight0 - povarHeight2);\n            lines.push(pAx);\n            lines.push(pAy);\n            lines.push(pBx * dx + x0);\n            lines.push(pBy * dy + y0);\n          }\n          if (isOver1 !== isOver3) {\n            pBx = povar + 1;\n            pBy =\n              iSubSpectra +\n              (lineZValue - povarHeight1) / (povarHeight3 - povarHeight1);\n            lines.push(pAx);\n            lines.push(pAy);\n            lines.push(pBx * dx + x0);\n            lines.push(pBy * dy + y0);\n          }\n          if (isOver2 !== isOver3) {\n            pBx =\n              povar +\n              (lineZValue - povarHeight2) / (povarHeight3 - povarHeight2);\n            pBy = iSubSpectra + 1;\n            lines.push(pAx);\n            lines.push(pAy);\n            lines.push(pBx * dx + x0);\n            lines.push(pBy * dy + y0);\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    minX: zData.minX,\n    maxX: zData.maxX,\n    minY: zData.minY,\n    maxY: zData.maxY,\n    segments: contourLevels,\n  };\n}\n","export default function profiling(result, action, options) {\n  if (result.profiling) {\n    result.profiling.push({\n      action,\n      time: Date.now() - options.start,\n    });\n  }\n}\n","export default function simpleChromatogram(result) {\n  let data = result.spectra[0].data;\n  result.chromatogram = {\n    times: data.x.slice(),\n    series: {\n      intensity: {\n        dimension: 1,\n        data: data.y.slice(),\n      },\n    },\n  };\n}\n","export default function prepareSpectrum(spectrum) {\n  if (!spectrum.xFactor) spectrum.xFactor = 1;\n  if (!spectrum.yFactor) spectrum.yFactor = 1;\n  if (spectrum.observeFrequency) {\n    if (spectrum.xUnit && spectrum.xUnit.toUpperCase() === 'HZ') {\n      spectrum.xUnit = 'PPM';\n      spectrum.xFactor = spectrum.xFactor / spectrum.observeFrequency;\n      spectrum.firstX = spectrum.firstX / spectrum.observeFrequency;\n      spectrum.lastX = spectrum.lastX / spectrum.observeFrequency;\n      spectrum.deltaX = spectrum.deltaX / spectrum.observeFrequency;\n    }\n  }\n  if (spectrum.shiftOffsetVal) {\n    let shift = spectrum.firstX - spectrum.shiftOffsetVal;\n    spectrum.firstX = spectrum.firstX - shift;\n    spectrum.lastX = spectrum.lastX - shift;\n  }\n}\n","import { isMSField, convertMSFieldToLabel } from './complexChromatogram';\nimport convertToFloatArray from './convertToFloatArray';\nimport fastParseXYData from './parse/fastParseXYData';\nimport parsePeakTable from './parse/parsePeakTable';\nimport parseXYA from './parse/parseXYA';\nimport postProcessing from './postProcessing';\nimport prepareSpectrum from './prepareSpectrum';\nimport profiling from './profiling';\n\n// the following RegExp can only be used for XYdata, some peakTables have values with a \"E-5\" ...\nconst ntuplesSeparator = /[, \\t]+/;\n\nclass Spectrum {}\n\nconst defaultOptions = {\n  keepRecordsRegExp: /^$/,\n  canonicDataLabels: true,\n  dynamicTyping: false,\n  xy: true,\n  withoutXY: false,\n  chromatogram: false,\n  keepSpectra: false,\n  noContour: false,\n  nbContourLevels: 7,\n  noiseMultiplier: 5,\n  profiling: false,\n};\n\nexport default function convert(jcamp, options) {\n  options = Object.assign({}, defaultOptions, options);\n  options.wantXY = !options.withoutXY;\n  options.start = Date.now();\n\n  let entriesFlat = [];\n\n  let result = {\n    profiling: options.profiling ? [] : false,\n    logs: [],\n    entries: [],\n  };\n\n  let tmpResult = { children: [] };\n  let currentEntry = tmpResult;\n  let parentsStack = [];\n\n  let spectrum = new Spectrum();\n\n  if (typeof jcamp !== 'string') {\n    throw new TypeError('the JCAMP should be a string');\n  }\n\n  profiling(result, 'Before split to LDRS', options);\n\n  let ldrs = jcamp.replace(/[\\r\\n]+##/g, '\\n##').split('\\n##');\n\n  profiling(result, 'Split to LDRS', options);\n\n  if (ldrs[0]) ldrs[0] = ldrs[0].replace(/^[\\r\\n ]*##/, '');\n\n  for (let ldr of ldrs) {\n    // This is a new LDR\n    let position = ldr.indexOf('=');\n    let dataLabel = position > 0 ? ldr.substring(0, position) : ldr;\n    let dataValue = position > 0 ? ldr.substring(position + 1).trim() : '';\n\n    let canonicDataLabel = dataLabel.replace(/[_ -]/g, '').toUpperCase();\n\n    if (canonicDataLabel === 'DATATABLE') {\n      let endLine = dataValue.indexOf('\\n');\n      if (endLine === -1) endLine = dataValue.indexOf('\\r');\n      if (endLine > 0) {\n        let xIndex = -1;\n        let yIndex = -1;\n        // ##DATA TABLE= (X++(I..I)), XYDATA\n        // We need to find the variables\n\n        let infos = dataValue.substring(0, endLine).split(/[ ,;\\t]+/);\n        if (infos[0].indexOf('++') > 0) {\n          let firstVariable = infos[0].replace(\n            /.*\\(([a-zA-Z0-9]+)\\+\\+.*/,\n            '$1',\n          );\n          let secondVariable = infos[0].replace(/.*\\.\\.([a-zA-Z0-9]+).*/, '$1');\n          xIndex = currentEntry.ntuples.symbol.indexOf(firstVariable);\n          yIndex = currentEntry.ntuples.symbol.indexOf(secondVariable);\n        }\n\n        if (xIndex === -1) xIndex = 0;\n        if (yIndex === -1) yIndex = 0;\n\n        if (currentEntry.ntuples.first) {\n          if (currentEntry.ntuples.first.length > xIndex) {\n            spectrum.firstX = currentEntry.ntuples.first[xIndex];\n          }\n          if (currentEntry.ntuples.first.length > yIndex) {\n            spectrum.firstY = currentEntry.ntuples.first[yIndex];\n          }\n        }\n        if (currentEntry.ntuples.last) {\n          if (currentEntry.ntuples.last.length > xIndex) {\n            spectrum.lastX = currentEntry.ntuples.last[xIndex];\n          }\n          if (currentEntry.ntuples.last.length > yIndex) {\n            spectrum.lastY = currentEntry.ntuples.last[yIndex];\n          }\n        }\n        if (\n          currentEntry.ntuples.vardim &&\n          currentEntry.ntuples.vardim.length > xIndex\n        ) {\n          spectrum.nbPoints = currentEntry.ntuples.vardim[xIndex];\n        }\n        if (currentEntry.ntuples.factor) {\n          if (currentEntry.ntuples.factor.length > xIndex) {\n            spectrum.xFactor = currentEntry.ntuples.factor[xIndex];\n          }\n          if (currentEntry.ntuples.factor.length > yIndex) {\n            spectrum.yFactor = currentEntry.ntuples.factor[yIndex];\n          }\n        }\n        if (currentEntry.ntuples.units) {\n          if (currentEntry.ntuples.units.length > xIndex) {\n            spectrum.xUnit = currentEntry.ntuples.units[xIndex];\n          }\n          if (currentEntry.ntuples.units.length > yIndex) {\n            spectrum.yUnit = currentEntry.ntuples.units[yIndex];\n          }\n        }\n        spectrum.datatable = infos[0];\n        if (infos[1] && infos[1].indexOf('PEAKS') > -1) {\n          canonicDataLabel = 'PEAKTABLE';\n        } else if (\n          infos[1] &&\n          (infos[1].indexOf('XYDATA') || infos[0].indexOf('++') > 0)\n        ) {\n          canonicDataLabel = 'XYDATA';\n          spectrum.deltaX =\n            (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n        }\n      }\n    }\n\n    if (canonicDataLabel === 'XYDATA') {\n      if (options.wantXY) {\n        prepareSpectrum(spectrum);\n        // well apparently we should still consider it is a PEAK TABLE if there are no '++' after\n        if (dataValue.match(/.*\\+\\+.*/)) {\n          // ex: (X++(Y..Y))\n          if (!spectrum.deltaX) {\n            spectrum.deltaX =\n              (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n          }\n          fastParseXYData(spectrum, dataValue, result);\n        } else {\n          parsePeakTable(spectrum, dataValue, result);\n        }\n        currentEntry.spectra.push(spectrum);\n        spectrum = new Spectrum();\n      }\n      continue;\n    } else if (canonicDataLabel === 'PEAKTABLE') {\n      if (options.wantXY) {\n        prepareSpectrum(spectrum);\n        parsePeakTable(spectrum, dataValue, result);\n        currentEntry.spectra.push(spectrum);\n        spectrum = new Spectrum();\n      }\n      continue;\n    }\n    if (canonicDataLabel === 'PEAKASSIGNMENTS') {\n      if (options.wantXY) {\n        if (dataValue.match(/.*(XYA).*/)) {\n          // ex: (XYA)\n          parseXYA(spectrum, dataValue);\n        }\n        currentEntry.spectra.push(spectrum);\n        spectrum = new Spectrum();\n      }\n      continue;\n    }\n\n    if (canonicDataLabel === 'TITLE') {\n      let parentEntry = currentEntry;\n      if (!parentEntry.children) {\n        parentEntry.children = [];\n      }\n      currentEntry = {\n        spectra: [],\n        ntuples: {},\n        info: {},\n      };\n      parentEntry.children.push(currentEntry);\n      parentsStack.push(parentEntry);\n      entriesFlat.push(currentEntry);\n      currentEntry.title = dataValue;\n    } else if (canonicDataLabel === 'DATATYPE') {\n      currentEntry.dataType = dataValue;\n      if (dataValue.indexOf('nD') > -1) {\n        currentEntry.twoD = true;\n      }\n    } else if (canonicDataLabel === 'NTUPLES') {\n      if (dataValue.indexOf('nD') > -1) {\n        currentEntry.twoD = true;\n      }\n    } else if (canonicDataLabel === 'DATACLASS') {\n      currentEntry.dataClass = dataValue;\n    } else if (canonicDataLabel === 'XUNITS') {\n      spectrum.xUnit = dataValue;\n    } else if (canonicDataLabel === 'YUNITS') {\n      spectrum.yUnit = dataValue;\n    } else if (canonicDataLabel === 'FIRSTX') {\n      spectrum.firstX = parseFloat(dataValue);\n    } else if (canonicDataLabel === 'LASTX') {\n      spectrum.lastX = parseFloat(dataValue);\n    } else if (canonicDataLabel === 'FIRSTY') {\n      spectrum.firstY = parseFloat(dataValue);\n    } else if (canonicDataLabel === 'LASTY') {\n      spectrum.lastY = parseFloat(dataValue);\n    } else if (canonicDataLabel === 'NPOINTS') {\n      spectrum.nbPoints = parseFloat(dataValue);\n    } else if (canonicDataLabel === 'XFACTOR') {\n      spectrum.xFactor = parseFloat(dataValue);\n    } else if (canonicDataLabel === 'YFACTOR') {\n      spectrum.yFactor = parseFloat(dataValue);\n    } else if (canonicDataLabel === 'MAXX') {\n      spectrum.maxX = parseFloat(dataValue);\n    } else if (canonicDataLabel === 'MINX') {\n      spectrum.minX = parseFloat(dataValue);\n    } else if (canonicDataLabel === 'MAXY') {\n      spectrum.maxY = parseFloat(dataValue);\n    } else if (canonicDataLabel === 'MINY') {\n      spectrum.minY = parseFloat(dataValue);\n    } else if (canonicDataLabel === 'DELTAX') {\n      spectrum.deltaX = parseFloat(dataValue);\n    } else if (\n      canonicDataLabel === '.OBSERVEFREQUENCY' ||\n      canonicDataLabel === '$SFO1'\n    ) {\n      if (!spectrum.observeFrequency) {\n        spectrum.observeFrequency = parseFloat(dataValue);\n      }\n    } else if (canonicDataLabel === '.OBSERVENUCLEUS') {\n      if (!spectrum.xType) {\n        currentEntry.xType = dataValue.replace(/[^a-zA-Z0-9]/g, '');\n      }\n    } else if (canonicDataLabel === '$SFO2') {\n      if (!currentEntry.indirectFrequency) {\n        currentEntry.indirectFrequency = parseFloat(dataValue);\n      }\n    } else if (canonicDataLabel === '$OFFSET') {\n      // OFFSET for Bruker spectra\n      currentEntry.shiftOffsetNum = 0;\n      if (!spectrum.shiftOffsetVal) {\n        spectrum.shiftOffsetVal = parseFloat(dataValue);\n      }\n    } else if (canonicDataLabel === '$REFERENCEPOINT') {\n      // OFFSET for Varian spectra\n      // if we activate this part it does not work for ACD specmanager\n      //         } else if (canonicDataLabel=='.SHIFTREFERENCE') {   // OFFSET FOR Bruker Spectra\n      //                 var parts = dataValue.split(/ *, */);\n      //                 currentEntry.shiftOffsetNum = parseInt(parts[2].trim());\n      //                 spectrum.shiftOffsetVal = parseFloat(parts[3].trim());\n    } else if (canonicDataLabel === 'VARNAME') {\n      currentEntry.ntuples.varname = dataValue.split(ntuplesSeparator);\n    } else if (canonicDataLabel === 'SYMBOL') {\n      currentEntry.ntuples.symbol = dataValue.split(ntuplesSeparator);\n    } else if (canonicDataLabel === 'VARTYPE') {\n      currentEntry.ntuples.vartype = dataValue.split(ntuplesSeparator);\n    } else if (canonicDataLabel === 'VARFORM') {\n      currentEntry.ntuples.varform = dataValue.split(ntuplesSeparator);\n    } else if (canonicDataLabel === 'VARDIM') {\n      currentEntry.ntuples.vardim = convertToFloatArray(\n        dataValue.split(ntuplesSeparator),\n      );\n    } else if (canonicDataLabel === 'UNITS') {\n      currentEntry.ntuples.units = dataValue.split(ntuplesSeparator);\n    } else if (canonicDataLabel === 'FACTOR') {\n      currentEntry.ntuples.factor = convertToFloatArray(\n        dataValue.split(ntuplesSeparator),\n      );\n    } else if (canonicDataLabel === 'FIRST') {\n      currentEntry.ntuples.first = convertToFloatArray(\n        dataValue.split(ntuplesSeparator),\n      );\n    } else if (canonicDataLabel === 'LAST') {\n      currentEntry.ntuples.last = convertToFloatArray(\n        dataValue.split(ntuplesSeparator),\n      );\n    } else if (canonicDataLabel === 'MIN') {\n      currentEntry.ntuples.min = convertToFloatArray(\n        dataValue.split(ntuplesSeparator),\n      );\n    } else if (canonicDataLabel === 'MAX') {\n      currentEntry.ntuples.max = convertToFloatArray(\n        dataValue.split(ntuplesSeparator),\n      );\n    } else if (canonicDataLabel === '.NUCLEUS') {\n      if (currentEntry.twoD) {\n        currentEntry.yType = dataValue.split(ntuplesSeparator)[0];\n      }\n    } else if (canonicDataLabel === 'PAGE') {\n      spectrum.page = dataValue.trim();\n      spectrum.pageValue = parseFloat(dataValue.replace(/^.*=/, ''));\n      spectrum.pageSymbol = spectrum.page.replace(/[=].*/, '');\n      let pageSymbolIndex = currentEntry.ntuples.symbol.indexOf(\n        spectrum.pageSymbol,\n      );\n      let unit = '';\n      if (\n        currentEntry.ntuples.units &&\n        currentEntry.ntuples.units[pageSymbolIndex]\n      ) {\n        unit = currentEntry.ntuples.units[pageSymbolIndex];\n      }\n      if (currentEntry.indirectFrequency && unit !== 'PPM') {\n        spectrum.pageValue /= currentEntry.indirectFrequency;\n      }\n    } else if (canonicDataLabel === 'RETENTIONTIME') {\n      spectrum.pageValue = parseFloat(dataValue);\n    } else if (isMSField(canonicDataLabel)) {\n      spectrum[convertMSFieldToLabel(canonicDataLabel)] = dataValue;\n    } else if (canonicDataLabel === 'SAMPLEDESCRIPTION') {\n      spectrum.sampleDescription = dataValue;\n    } else if (canonicDataLabel === 'END') {\n      currentEntry = parentsStack.pop();\n    }\n\n    if (\n      currentEntry &&\n      currentEntry.info &&\n      canonicDataLabel.match(options.keepRecordsRegExp)\n    ) {\n      let label = options.canonicDataLabels ? canonicDataLabel : dataLabel;\n      let value = dataValue.trim();\n      if (options.dynamicTyping && !isNaN(value)) {\n        value = Number(value);\n      }\n      if (currentEntry.info[label]) {\n        if (!Array.isArray(currentEntry.info[label])) {\n          currentEntry.info[label] = [currentEntry.info[label]];\n        }\n        currentEntry.info[label].push(value);\n      } else {\n        currentEntry.info[label] = value;\n      }\n    }\n  }\n\n  profiling(result, 'Finished parsing', options);\n\n  postProcessing(entriesFlat, result, options);\n\n  profiling(result, 'Total time', options);\n\n  /*\n  if (result.children && result.children.length>0) {\n    result = { ...result, ...result.children[0] };\n  }\n  */\n  result.entries = tmpResult.children;\n  result.flatten = entriesFlat;\n\n  return result;\n}\n","import add2D from './2d/add2D';\nimport { complexChromatogram } from './complexChromatogram';\nimport profiling from './profiling';\nimport simpleChromatogram from './simpleChromatogram';\n\nexport default function postProcessing(entriesFlat, result, options) {\n  for (let entry of entriesFlat) {\n    if (Object.keys(entry.ntuples).length > 0) {\n      let newNtuples = [];\n      let keys = Object.keys(entry.ntuples);\n      for (let i = 0; i < keys.length; i++) {\n        let key = keys[i];\n        let values = entry.ntuples[key];\n        for (let j = 0; j < values.length; j++) {\n          if (!newNtuples[j]) newNtuples[j] = {};\n          newNtuples[j][key] = values[j];\n        }\n      }\n      entry.ntuples = newNtuples;\n    }\n\n    if (entry.twoD && options.wantXY) {\n      add2D(entry, options);\n\n      profiling(result, 'Finished countour plot calculation', options);\n\n      if (!options.keepSpectra) {\n        delete entry.spectra;\n      }\n    }\n\n    if (options.chromatogram) {\n      options.xy = true;\n    }\n\n    if (options.xy && options.wantXY) {\n      // the spectraData should not be a oneD array but an object with x and y\n      if (entry.spectra && entry.spectra.length > 0) {\n        for (let spectrum of entry.spectra) {\n          if (spectrum.data) {\n            let data = spectrum.data;\n            let newData = {\n              x: new Array(data.length / 2),\n              y: new Array(data.length / 2),\n            };\n            for (let k = 0; k < data.length; k = k + 2) {\n              newData.x[k / 2] = data[k];\n              newData.y[k / 2] = data[k + 1];\n            }\n            spectrum.data = newData;\n          }\n        }\n      }\n    }\n\n    // maybe it is a GC (HPLC) / MS. In this case we add a new format\n    if (options.chromatogram) {\n      if (entry.spectra.length > 1) {\n        complexChromatogram(entry);\n      } else {\n        simpleChromatogram(entry);\n      }\n      profiling(result, 'Finished chromatogram calculation', options);\n    }\n  }\n}\n","export function fromXxyyArray(data) {\n  return { x: data[0], y: data[1] };\n}\n\nexport function fromXyxyArray(data) {\n  var x = [];\n  var y = [];\n  for (const point of data) {\n    x.push(point[0]);\n    y.push(point[1]);\n  }\n  return { x, y };\n}\n\nexport function fromXyxyObject(data) {\n  var x = [];\n  var y = [];\n  for (const point of data) {\n    x.push(point.x);\n    y.push(point.y);\n  }\n  return { x, y };\n}\n\nexport function fromGeneral(data) {\n  if (Array.isArray(data)) {\n    if (data.length === 0) return { x: [], y: [] };\n    if (Array.isArray(data[0])) {\n      if (data.length === 2) {\n        return fromXxyyArray(data);\n      } else {\n        return fromXyxyArray(data);\n      }\n    } else {\n      return fromXyxyObject(data);\n    }\n  } else {\n    if (Array.isArray(data.x) && Array.isArray(data.x)) {\n      return data;\n    } else {\n      throw new TypeError('unknown data format');\n    }\n  }\n}\n","import { fromGeneral, fromXxyyArray, fromXyxyArray, fromXyxyObject } from './from';\nimport { toXxyyArray, toXyxyArray, toXyxyObject } from './to';\n\n/**\n * Convert between different xy formats\n * @param {*} data - input set of points to parse\n * @param {object} [options] - input and output options\n * @param {string} [options.inputFormat] - input format, if not in list infers the kind\n * @param {string} [options.outputFormat = 'xxyyObject'] - output format\n * @return {*} - output set of points\n */\nexport default function xyConvert(data, options = {}) {\n  const { inputFormat, outputFormat = 'xxyyObject' } = options;\n\n  if (inputFormat === outputFormat) return data;\n\n  let middleData;\n  switch (inputFormat) {\n    case 'xxyyArray':\n      middleData = fromXxyyArray(data);\n      break;\n\n    case 'xyxyArray':\n      middleData = fromXyxyArray(data);\n      break;\n\n    case 'xxyyObject':\n      // this is the base case\n      middleData = data;\n      break;\n\n    case 'xyxyObject':\n      middleData = fromXyxyObject(data);\n      break;\n\n    default:\n      middleData = fromGeneral(data);\n      break;\n  }\n\n  switch (outputFormat) {\n    case 'xxyyArray':\n      return toXxyyArray(middleData);\n\n    case 'xyxyArray':\n      return toXyxyArray(middleData);\n\n    case 'xxyyObject':\n      return middleData;\n\n    case 'xyxyObject':\n      return toXyxyObject(middleData);\n\n    default:\n      throw new TypeError(`unknown output format ${outputFormat}`);\n  }\n}\n","export function toXxyyArray({ x, y }) {\n  return [x, y];\n}\n\nexport function toXyxyArray({ x, y }) {\n  var ans = [];\n  for (var index = 0; index < x.length; index++) {\n    ans.push([x[index], y[index]]);\n  }\n  return ans;\n}\n\nexport function toXyxyObject({ x, y }) {\n  var ans = [];\n  for (var index = 0; index < x.length; index++) {\n    ans.push({ x: x[index], y: y[index] });\n  }\n  return ans;\n}\n","import { parseXY } from 'xy-parser';\nimport xyConvert from 'ml-xy-convert';\n\nimport creator from './creator';\n\n/**\n * Convert strings into JCAMP and add extra information\n * @param {string} data - values to add to the file, usually a csv or tsv values\n * @param {object} [options={}]\n * @param {string} [options.meta] - metadata of the file\n * @param {string} [options.meta.title = ''] - title of the file\n * @param {string} [options.meta.owner = ''] - owner of the file\n * @param {string} [options.meta.origin = ''] - origin of the file\n * @param {string} [options.meta.type = ''] - type of data\n * @param {string} [options.meta.xUnit = ''] - units for the x axis\n * @param {string} [options.meta.yUnit = ''] - units for the y axis\n * @param {object} [options.meta.info = {}] - comments to add to the file\n * @param {object} [options.parser = {}] - 'xy-parser' options. arrayType = 'xyxy' is enforced\n * @return {string} JCAMP of the input\n */\nexport function fromText(data, options = {}) {\n  const { meta = {}, parserOptions = {} } = options;\n\n  parserOptions.keepInfo = true;\n  let parsed = parseXY(data, parserOptions);\n\n  if (!meta.info) meta.info = {};\n  meta.info.header = parsed.info.map((i) => i.value).join('\\n');\n  let jcamp = creator(parsed.data, meta);\n  return jcamp;\n}\n\n/**\n * Parse from any supported format in ml-xy-convert\n * @param {*} data - object or array with a set of points\n * @param {object} [meta] - metadata object\n * @return {string} JCAMP of the input\n */\nexport function fromJSON(data, meta = {}) {\n  const parsed = xyConvert(data, { outputFormat: 'xxyyObject' });\n  return creator(parsed, meta);\n}\n","/**\n * Parse from a xyxy data array\n * @param {Array<Array<number>>} data\n * @param {object} [meta] - same metadata object format that the fromText\n * @return {string} JCAMP of the input\n */\nexport default function creator(data, meta = {}) {\n  const {\n    title = '',\n    owner = '',\n    origin = '',\n    type = '',\n    xUnit = '',\n    yUnit = '',\n    info = {},\n  } = meta;\n  let firstX = Number.POSITIVE_INFINITY;\n  let lastX = Number.NEGATIVE_INFINITY;\n  let firstY = Number.POSITIVE_INFINITY;\n  let lastY = Number.NEGATIVE_INFINITY;\n  let points = [];\n\n  for (let i = 0; i < data.x.length; i++) {\n    let x = data.x[i];\n    let y = data.y[i];\n    if (firstX > x) {\n      firstX = x;\n    }\n    if (lastX < x) {\n      lastX = x;\n    }\n    if (firstY > y) {\n      firstY = y;\n    }\n    if (lastY < y) {\n      lastY = y;\n    }\n    points.push(`${x} ${y}`);\n  }\n\n  let header = `##TITLE=${title}\n##JCAMP-DX=4.24\n##DATA TYPE=${type}\n##ORIGIN=${origin}\n##OWNER=${owner}\n##XUNITS=${xUnit}\n##YUNITS=${yUnit}\n##FIRSTX=${firstX}\n##LASTX=${lastX}\n##FIRSTY=${firstY}\n##LASTY=${lastY}\\n`;\n\n  for (const key of Object.keys(info)) {\n    header += `##$${key}=${info[key]}\\n`;\n  }\n\n  // we leave the header and utf8 fonts ${header.replace(/[^\\t\\r\\n\\x20-\\x7F]/g, '')\n\n  return `${header}##NPOINTS=${points.length}\n##PEAK TABLE=(XY..XY)\n${points.join('\\n')}\n##END`;\n}\n","import { fromJSON } from 'convert-to-jcamp';\n\nexport default function toJcamp(spectrum) {\n  let jcamps = [];\n  let weightVersusTemperature = spectrum.get('weightVersusTemperature');\n  if (weightVersusTemperature) {\n    jcamps.push(getJcamp(weightVersusTemperature));\n  }\n  let weightVersusTime = spectrum.get('weightVersusTime');\n  if (weightVersusTime) {\n    jcamps.push(getJcamp(weightVersusTime));\n  }\n\n  return jcamps.join('\\n');\n}\n\nfunction getJcamp(spectrum) {\n  let options = {\n    xUnit: spectrum.xLabel,\n    yUnit: spectrum.yLabel,\n    title: spectrum.title,\n    type: 'TGA',\n    info: spectrum.meta,\n  };\n  return fromJSON({ x: spectrum.x, y: spectrum.y }, options);\n}\n","export default function addStyle(serie, spectrum, options = {}) {\n  const { color = 'darkgrey' } = options;\n  serie.style = [\n    {\n      name: 'unselected',\n      style: {\n        line: {\n          color,\n          width: 1,\n          dash: 1,\n        },\n      },\n    },\n    {\n      name: 'selected',\n      style: {\n        line: {\n          color,\n          width: 3,\n          dash: 1,\n        },\n      },\n    },\n  ];\n  serie.name = spectrum.label || spectrum.id;\n}\n","export default class SpectraManager {\n  constructor() {\n    this.spectra = [];\n  }\n\n  addSpectrum(spectrum) {\n    let index = this.getSpectrumIndex(spectrum.id);\n    if (index === undefined) {\n      this.spectra.push(spectrum);\n    } else {\n      this.spectra[index] = spectrum;\n    }\n  }\n\n  getSpectra(options = {}) {\n    const { ids } = options;\n    let spectra = [];\n    for (const spectrum of this.spectra) {\n      if (!ids || ids.includes(spectrum.id)) {\n        spectra.push(spectrum);\n      }\n    }\n    return spectra;\n  }\n\n  /**\n   * Remove the spectrum from the SpectraProcessor for the specified id\n   * @param {string} id\n   */\n  removeSpectrum(id) {\n    let index = this.getSpectrumIndex(id);\n    if (index === undefined) return undefined;\n    return this.spectra.splice(index, 1);\n  }\n\n  /**\n   * Returns the index of the spectrum in the spectra array\n   * @param {string} id\n   * @returns {number}\n   */\n  getSpectrumIndex(id) {\n    if (!id) return undefined;\n    for (let i = 0; i < this.spectra.length; i++) {\n      let spectrum = this.spectra[i];\n      if (spectrum.id === id) return i;\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the ID of a spectrum exists in the SpectraProcessor\n   * @param {string} id\n   */\n  contains(id) {\n    return !isNaN(this.getSpectrumIndex(id));\n  }\n}\n","import Spectrum from '../Spectrum';\nimport addJcamp from '../addJcamp';\n/**\n * Creates a new Chromatogram element based in a JCAMP string\n * @param {string} jcamp - String containing the JCAMP data\n * @param {object} [options={}]\n * @param {object} [options.id=Math.random()]\n * @return {Spectrum} - New class element with the given data\n */\nexport default function fromJcamp(jcamp, options = {}) {\n  let spectrum = new Spectrum(options);\n  addJcamp(spectrum, jcamp);\n  return spectrum;\n}\n","import { convert } from 'jcampconverter';\n\nexport default function addJcamp(spectrum, jcamp) {\n  let converted = convert(jcamp, {\n    keepRecordsRegExp: /.*/,\n    canonicDataLabels: false,\n    dynamicTyping: true,\n  });\n\n  for (let entry of converted.flatten) {\n    let currentSpectrum = entry.spectra[0];\n\n    let xLabel = currentSpectrum.xUnit;\n    let yLabel = currentSpectrum.yUnit;\n\n    let flavor = '';\n    if (xLabel.match(/\\[.*C\\]/)) flavor = 'weightVersusTemperature';\n    if (xLabel.match(/\\[.*s\\]/)) flavor = 'weightVersusTime';\n    if (flavor) {\n      spectrum.set(currentSpectrum.data, {\n        flavor,\n        xLabel,\n        yLabel,\n        title: currentSpectrum.title,\n      });\n    }\n  }\n}\n","import Spectrum from '../Spectrum';\n\nimport parsePerkinElmer from './parsePerkinElmer';\n\n/**\n * Creates a new Chromatogram element based in a JCAMP string\n * @param {string} text - String containing the JCAMP data\n * @return {Spectrum} - New class element with the given data\n */\nexport default function fromPerkinElmer(text) {\n  let spectrum = new Spectrum();\n  let result = parsePerkinElmer(text);\n\n  spectrum.set(\n    { x: result.data.temperature, y: result.data.weight },\n    {\n      xLabel: 'Temperature [°C]',\n      yLabel: 'Weight [mg]',\n      title: result.meta['Sample ID'],\n      meta: result.meta,\n      flavor: 'weightVersusTemperature',\n    },\n  );\n  spectrum.set(result.data.time, result.data.weight, {\n    xLabel: 'Time [s]',\n    yLabel: 'Weight [mg]',\n    title: result.meta['Sample ID'],\n    meta: result.meta,\n    flavor: 'weightVersusTime',\n  });\n  return spectrum;\n}\n","import addStyle from './addStyle';\n\n/**\n * Retrieve a chart with selected original data\n * @param {SpectraManager} spectraManager\n * @param {object} [options={}]\n * @param {Array} [options.ids] List of spectra ids, by default all\n * @param {Array} [options.colors] List of colors\n * @param {Array} [options.flavor]\n * @param {object} [options.normalization]\n */\nexport default function getJSGraph(spectraManager, options = {}) {\n  const { ids, colors, flavor, normalization } = options;\n  let spectra = spectraManager.getSpectra({ ids });\n  let series = [];\n\n  let xLabel = '';\n  let yLabel = '';\n\n  for (let i = 0; i < spectra.length; i++) {\n    const spectrum = spectra[i];\n    let serie = {};\n    let currentData = spectrum.getData({ flavor, normalization });\n    if (!currentData) continue;\n    if (!xLabel) xLabel = spectrum.getXLabel(flavor);\n    if (!yLabel) yLabel = spectrum.getYLabel(flavor);\n    addStyle(serie, spectrum, { color: colors[i] });\n    serie.data = currentData;\n    series.push(serie);\n  }\n  return {\n    axes: {\n      x: {\n        label: xLabel,\n        unit: '',\n        unitWrapperBefore: '',\n        unitWrapperAfter: '',\n        flipped: false,\n        display: true,\n      },\n      y: {\n        label: yLabel,\n        unit: '',\n        unitWrapperBefore: '',\n        unitWrapperAfter: '',\n        flipped: false,\n        display: true,\n      },\n    },\n    series,\n  };\n}\n"],"names":["toString","Object","prototype","isAnyArray","object","call","endsWith","max","input","isArray","TypeError","length","maxValue","i","sum","sumValue","norm","output","options","arguments","undefined","_options$algorithm","algorithm","_options$sumValue","_options$maxValue","Error","Array","toLowerCase","absoluteSumValue","absoluteSum","slice","currentMaxValue","factor","_i","sumFactor","_i2","concat","Math","abs","min","minValue","rescale","currentMin","currentMax","RangeError","_options$min","autoMinMax","_options$max","_typeof","obj","Symbol","iterator","constructor","sequentialFill","_options","_options$from","from","_options$to","to","_options$size","size","step","floor","push","normalize","zones","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","JSON","parse","stringify","map","zone","sort","a","b","forEach","filter","currentZone","result","integral","x0","x1","slope","intercept","equallySpaced","arrayXY","x","y","xLength","reverse","variant","numberOfPoints","exclusions","isNaN","exclusion","nextExclusion","invert","unitsPerPoint","reduce","previous","current","currentTotal","round","zonesWithPoints","xResult","yResult","zoneResult","processZone","halfStep","lastStep","start","previousX","MAX_VALUE","previousY","nextX","nextY","frontOutsideSpectra","backOutsideSpectra","currentValue","currentPoints","j","main","equallySpacedSlot","initialOriginalStep","lastOriginalStep","MIN_VALUE","sumAtMin","sumAtMax","add","equallySpacedSmooth","filterX","points","currentFrom","getZones","currentZoneIndex","newX","newY","position","compareNumbers","exports","values","l","arithmeticMean","mul","pow","lnsum","log","means","samples","n","percent","alreadySorted","k","r1","r2","half","unbiased","theMean","mean","theVariance","sqrt","variance","standardDeviation","averageDeviations","stdev","quart","q1","ceil","q2","median","q3","pooledVariance","vari","itemCount","itemArray","count","index","indexOf","maxIndex","vector1","vector2","mean1","mean2","cov","s2","s3","dev","m2","g","s4","v","eps","weights","weightedVariance","weightedMean","z","w","inPlace","standardDev","array","findClosestIndex","target","low","high","middle","multiply","array1","array2","constant","isConstant","array3","Float64Array","dotProduct","A","B","crossCorrelation","tau","lag","q","X","autoCorrelation","boxPlot","q1max","q3min","info","Q1","Q2","Q3","middleOver","correlation","sumA","sumA2","sumB","sumB2","sumAB","divide","getFromToIndex","fromIndex","toIndex","getTargetIndex","targetIndex","rotate","shift","subtract","checkRowIndex","matrix","outer","rows","checkColumnIndex","columns","checkRowVector","vector","to1DArray","checkColumnVector","checkRowIndices","rowIndices","some","r","checkColumnIndices","columnIndices","c","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","value","name","formatNumber","num","numStr","String","padEnd","precise","toPrecision","maxNumSize","exponential","toExponential","eIndex","e","substring","AbstractMatrix","newRows","newColumns","newData","newMatrix","Matrix","row","column","set","fill","random","isInteger","interval","this","zeros","data","matrix1","matrix2","checkMatrix","get","isMatrix","klass","apply","callback","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","echelonForm","clone","h","iMax","swapRows","tmp","reducedEchelonForm","m","maxRow","p","pivot","repeat","setSubMatrix","neg","mulS","getRow","getRowVector","rowVector","setRow","row1","row2","temp","getColumn","getColumnVector","columnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","idx","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","diag","type","cumulativeSum","dot","mmul","other","Bcolj","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","c1","c2","embed","mat","cols","resultat","console","warn","blockMult","halfRows","parseInt","halfCols","subMatrix","sub","scaleRows","isFinite","scaleColumns","flipRows","first","last","flipColumns","kroneckerProduct","transpose","sortRows","compareFunction","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","checkIndices","rowIndex","columnIndex","trace","by","sumByRow","sumByColumn","sumAll","product","productByRow","productByColumn","productAll","sum1","sum2","varianceByRow","varianceByColumn","varianceAll","center","centerByRow","centerByColumn","centerAll","scale","getScaleByRow","scaleByRow","getScaleByColumn","scaleByColumn","divider","getScaleAll","scaleAll","for","indent","indentData","maxI","maxJ","line","join","inspectData","rand","randomInt","randInt","diagonal","identity","eye","negate","tensorProduct","nRows","nColumns","arrayData","removeRow","splice","addRow","removeColumn","newRow","addColumn","addS","addM","subS","subM","subtractS","subtractM","mulM","multiplyS","multiplyM","div","divS","divM","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","acos","acosh","asin","asinh","atan","atanh","cbrt","clz32","cos","cosh","exp","expm1","fround","log1p","log10","log2","sign","sin","sinh","tan","tanh","trunc","arg0","powS","powM","installMathOperations","BaseView","MatrixTransposeView","WrapperMatrix2D","LuDecomposition","t","LUcolj","kmax","lu","pivotVector","pivotSign","LU","isSingular","col","solve","determinant","hypotenuse","QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","si","nct","nrt","mrc","pp","EPSILON","kase","alpha","ks","f","cs","sn","sp","spm1","epm1","sk","ek","Y","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","tol","ii","useSVD","leftHandSide","rightHandSide","defaultOptions","assign","matrixCase","len","cond","arrayCase","windowSize","derivative","polynomial","pad","padValue","savitzkyGolay","C","padArray","ans","J","ones","inic","Jtranspose","factorial","det","d","DEFAULT_FLAVOR","Spectrum","id","label","flavors","flavor","meta","xLabel","yLabel","title","standardizeData","getData","normalization","spectrum","filters","processing","filterOptions","Stat","std","normed","process","kind","getNormalized","getXLabel","getYLabel","trim","string","replace","GC_MS_FIELDS","complexChromatogram","spectra","chromatogram","times","series","ms","dimension","existingGCMSFields","convertMSFieldToLabel","pageValue","parseFloat","isMSField","canonicDataLabel","convertToFloatArray","stringArray","floatArray","fastParseXYData","yFactor","deltaX","isXYdata","currentData","ascii","currentX","firstX","currentY","firstY","endLine","charCodeAt","newLine","isDifference","isLastDifference","lastDifference","isDuplicate","inComment","lastValue","isNegative","inValue","skipFirstValue","decimalPosition","duplicate","ascii2","parsePeakTable","removeCommentRegExp","peakTableSplitRegExp","isPeaktable","lines","split","xFactor","logs","parseXYA","removeSymbolRegExp","isXYAdata","_ref","module","window","quickSelectMedian","add2D","zData","minZ","maxZ","ySize","xSize","xVector","lastX","lastY","minX","maxX","minY","maxY","noise","getMedian","convertTo3DZ","noContour","contourLines","povarHeight0","povarHeight1","povarHeight2","povarHeight3","isOver0","isOver1","isOver2","isOver3","pAx","pAy","pBx","pBy","lineZValue","nbSubSpectra","nbPovars","dx","y0","dy","iter","nbContourLevels","contourLevels","level","contourLevel","side","noiseMultiplier","zValue","iSubSpectra","subSpectra","subSpectraAfter","povar","segments","generateContourLines","minMax","profiling","action","time","Date","now","simpleChromatogram","intensity","prepareSpectrum","observeFrequency","xUnit","toUpperCase","shiftOffsetVal","ntuplesSeparator","keepRecordsRegExp","canonicDataLabels","dynamicTyping","xy","withoutXY","keepSpectra","convert","jcamp","wantXY","entriesFlat","entries","tmpResult","children","currentEntry","parentsStack","ldrs","ldr","dataLabel","dataValue","xIndex","yIndex","infos","firstVariable","secondVariable","ntuples","symbol","vardim","nbPoints","units","yUnit","datatable","parentEntry","dataType","twoD","dataClass","xType","indirectFrequency","shiftOffsetNum","varname","vartype","varform","yType","page","pageSymbol","pageSymbolIndex","unit","sampleDescription","pop","match","entry","keys","newNtuples","key","postProcessing","flatten","fromXxyyArray","fromXyxyArray","point","fromXyxyObject","xyConvert","inputFormat","outputFormat","middleData","fromGeneral","toXxyyArray","toXyxyArray","toXyxyObject","fromJSON","owner","origin","header","creator","getJcamp","addStyle","serie","color","style","width","dash","addSpectrum","getSpectrumIndex","getSpectra","ids","includes","removeSpectrum","contains","converted","currentSpectrum","addJcamp","text","weight","temperature","section","inMethodSteps","startsWith","description","fields","parsePerkinElmer","spectraManager","colors","axes","unitWrapperBefore","unitWrapperAfter","flipped","display","jcamps","weightVersusTemperature","weightVersusTime"],"mappings":"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"}